
000_Sand_Box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000138  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f4  080002fc  000102fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f4  080002f4  000102fc  2**0
                  CONTENTS
  4 .ARM          00000000  080002f4  080002f4  000102fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f4  080002fc  000102fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f4  080002f4  000102f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000102fc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000001c9  00000000  00000000  0001032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000e2  00000000  00000000  000104f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  000105d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f34  00000000  00000000  00010690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000474  00000000  00000000  000115c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003b69  00000000  00000000  00011a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000155a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000f8  00000000  00000000  000155f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000000 	.word	0x20000000
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080002dc 	.word	0x080002dc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000004 	.word	0x20000004
 80001f8:	080002dc 	.word	0x080002dc

080001fc <add_by_pointer>:
{
	return x + y;
}

void add_by_pointer(int x, int y, int *result)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	60f8      	str	r0, [r7, #12]
 8000204:	60b9      	str	r1, [r7, #8]
 8000206:	607a      	str	r2, [r7, #4]
	*result = x + y;
 8000208:	68fa      	ldr	r2, [r7, #12]
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	441a      	add	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	601a      	str	r2, [r3, #0]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <main>:
  *i = *j;
  *j = temp;
}

int main(void)
{
 800021e:	b580      	push	{r7, lr}
 8000220:	b084      	sub	sp, #16
 8000222:	af00      	add	r7, sp, #0

	int x = 1;
 8000224:	2301      	movs	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
	int y = 2;
 8000228:	2302      	movs	r3, #2
 800022a:	60bb      	str	r3, [r7, #8]
	int result = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]

	add_by_pointer(x, y, &result);
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	461a      	mov	r2, r3
 8000234:	68b9      	ldr	r1, [r7, #8]
 8000236:	68f8      	ldr	r0, [r7, #12]
 8000238:	f7ff ffe0 	bl	80001fc <add_by_pointer>
//	int b = 20;
//
//	swapnum(&a, &b);

	/* Loop forever */
	for(;;);
 800023c:	e7fe      	b.n	800023c <main+0x1e>
	...

08000240 <Reset_Handler>:
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <LoopForever+0x2>)
 8000242:	4685      	mov	sp, r0
 8000244:	f3af 8000 	nop.w
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <LoopForever+0x6>)
 800024a:	490d      	ldr	r1, [pc, #52]	; (8000280 <LoopForever+0xa>)
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <LoopForever+0xe>)
 800024e:	2300      	movs	r3, #0
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:
 8000252:	58d4      	ldr	r4, [r2, r3]
 8000254:	50c4      	str	r4, [r0, r3]
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:
 8000258:	18c4      	adds	r4, r0, r3
 800025a:	428c      	cmp	r4, r1
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <LoopForever+0x12>)
 8000260:	4c0a      	ldr	r4, [pc, #40]	; (800028c <LoopForever+0x16>)
 8000262:	2300      	movs	r3, #0
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:
 8000266:	6013      	str	r3, [r2, #0]
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:
 800026a:	42a2      	cmp	r2, r4
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>
 800026e:	f000 f811 	bl	8000294 <__libc_init_array>
 8000272:	f7ff ffd4 	bl	800021e <main>

08000276 <LoopForever>:
 8000276:	e7fe      	b.n	8000276 <LoopForever>
 8000278:	200a0000 	.word	0x200a0000
 800027c:	20000000 	.word	0x20000000
 8000280:	20000000 	.word	0x20000000
 8000284:	080002fc 	.word	0x080002fc
 8000288:	20000000 	.word	0x20000000
 800028c:	2000001c 	.word	0x2000001c

08000290 <ADC1_IRQHandler>:
 8000290:	e7fe      	b.n	8000290 <ADC1_IRQHandler>
	...

08000294 <__libc_init_array>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	4d0d      	ldr	r5, [pc, #52]	; (80002cc <__libc_init_array+0x38>)
 8000298:	4c0d      	ldr	r4, [pc, #52]	; (80002d0 <__libc_init_array+0x3c>)
 800029a:	1b64      	subs	r4, r4, r5
 800029c:	10a4      	asrs	r4, r4, #2
 800029e:	2600      	movs	r6, #0
 80002a0:	42a6      	cmp	r6, r4
 80002a2:	d109      	bne.n	80002b8 <__libc_init_array+0x24>
 80002a4:	4d0b      	ldr	r5, [pc, #44]	; (80002d4 <__libc_init_array+0x40>)
 80002a6:	4c0c      	ldr	r4, [pc, #48]	; (80002d8 <__libc_init_array+0x44>)
 80002a8:	f000 f818 	bl	80002dc <_init>
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	10a4      	asrs	r4, r4, #2
 80002b0:	2600      	movs	r6, #0
 80002b2:	42a6      	cmp	r6, r4
 80002b4:	d105      	bne.n	80002c2 <__libc_init_array+0x2e>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002bc:	4798      	blx	r3
 80002be:	3601      	adds	r6, #1
 80002c0:	e7ee      	b.n	80002a0 <__libc_init_array+0xc>
 80002c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c6:	4798      	blx	r3
 80002c8:	3601      	adds	r6, #1
 80002ca:	e7f2      	b.n	80002b2 <__libc_init_array+0x1e>
 80002cc:	080002f4 	.word	0x080002f4
 80002d0:	080002f4 	.word	0x080002f4
 80002d4:	080002f4 	.word	0x080002f4
 80002d8:	080002f8 	.word	0x080002f8

080002dc <_init>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	bf00      	nop
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr

080002e8 <_fini>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr
