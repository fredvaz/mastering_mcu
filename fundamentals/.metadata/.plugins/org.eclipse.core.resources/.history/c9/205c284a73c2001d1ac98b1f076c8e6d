/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

//* Macro for ADC Peripheral base address from 2.2.2 Memory map Table 1 0x5004 0000 - 0x5004 03FF for the L4R
//* Remember, all the peripherals are mapped in the memory address
//* Ul : unsigned long literal
#define ADC_BASE_ADDR 			0x50040000UL

//* ADC register offset 21.6.3 ADC control register (ADC_CR)
#define ADC_CR_REG_OFFSET 	 	0x08UL

//* We get the ADC register by
#define ADC_CR_REG_ADDR			(ADC_BASE_ADDR + ADC_CR_REG_OFFSET)

//* In modern MCUs, before using any peripheral, you must enable its peripheral clock using peripheral clock registers
//* ADC is connected to AHB2 BUS from data sheet Figure 1 or Table 1 Memory Map in Reference Manual
//* Go to 6.4 RCC registers
//* Go to 6.4.17 AHB2 peripheral clock enable register (RCC_AHB2ENR) Bit 13 ADC1EN: ADC1 clock enable
//* Memory map for the RCC 0x4002 1000 - 0x4002 13FF
#define RCC_BASE_ADDR			0x40021000UL
#define RCC_BASE_ADDR 			0x4CUL
#define RCC_AHB2_ENR_ADDR		(RCC_BASE_ADDR + RCC_BASE_ADDR)


//

int main(void)
{

	uint32_t *pAdcCr1Reg = (uint32_t*) ADC_CR_REG_ADDR;
	uint32_t *pRccAhb2Reg = (uint32_t*) RCC_AHB2_ENR_ADDR;

	//* 1. Enable the peripheral clock for ADC1
	*pRccAhb2Reg |= (1 << );

	//* Configure the Bit 0 to enable ADC
	*pAdcCr1Reg |= (1 << 0); // (1 << 8); // for the Bit 8 of the F4 MCU

    /* Loop forever */
	for(;;);
}
