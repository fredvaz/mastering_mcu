
LEDBlinking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005688  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005860  08005860  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005860  08005860  00015860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005868  08005868  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000055c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000056c  2000056c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021901  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000412f  00000000  00000000  00041941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  00045a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001808  00000000  00000000  00047430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f78a  00000000  00000000  00048c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecd3  00000000  00000000  000783c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119ed5  00000000  00000000  00097095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b0f6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d58  00000000  00000000  001b0fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005830 	.word	0x08005830

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08005830 	.word	0x08005830

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fbaa 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f818 	bl	8000558 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000528:	f000 f888 	bl	800063c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f8b2 	bl	8000694 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    // LED ON
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2108      	movs	r1, #8
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <main+0x38>)
 8000536:	f001 f88b 	bl	8001650 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800053a:	2064      	movs	r0, #100	; 0x64
 800053c:	f000 fbde 	bl	8000cfc <HAL_Delay>
    // LED OFF
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2108      	movs	r1, #8
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x38>)
 8000546:	f001 f883 	bl	8001650 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800054a:	2064      	movs	r0, #100	; 0x64
 800054c:	f000 fbd6 	bl	8000cfc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000550:	e7ee      	b.n	8000530 <main+0x14>
 8000552:	bf00      	nop
 8000554:	40022800 	.word	0x40022800

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	; 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f95a 	bl	8005820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <SystemClock_Config+0xdc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <SystemClock_Config+0xdc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <SystemClock_Config+0xdc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xe0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a25      	ldr	r2, [pc, #148]	; (8000638 <SystemClock_Config+0xe0>)
 80005a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <SystemClock_Config+0xe0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005cc:	23b4      	movs	r3, #180	; 0xb4
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80005d4:	2306      	movs	r3, #6
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80005d8:	2306      	movs	r3, #6
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 ff07 	bl	80033f4 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005ec:	f000 f9f0 	bl	80009d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005f0:	f002 fa34 	bl	8002a5c <HAL_PWREx_EnableOverDrive>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005fa:	f000 f9e9 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	2105      	movs	r1, #5
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fa6d 	bl	8002afc <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000628:	f000 f9d2 	bl	80009d0 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b090      	sub	sp, #64	; 0x40
 8000640:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	223c      	movs	r2, #60	; 0x3c
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f005 f8e9 	bl	8005820 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800064e:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8000652:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000654:	2390      	movs	r3, #144	; 0x90
 8000656:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000660:	2306      	movs	r3, #6
 8000662:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800066e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fc7c 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000686:	f000 f9a3 	bl	80009d0 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3740      	adds	r7, #64	; 0x40
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b090      	sub	sp, #64	; 0x40
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80006ae:	4bae      	ldr	r3, [pc, #696]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4aad      	ldr	r2, [pc, #692]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80006b4:	f043 0310 	orr.w	r3, r3, #16
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4bab      	ldr	r3, [pc, #684]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0310 	and.w	r3, r3, #16
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80006c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ca:	4ba7      	ldr	r3, [pc, #668]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4aa6      	ldr	r2, [pc, #664]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80006d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4ba4      	ldr	r3, [pc, #656]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
 80006e6:	4ba0      	ldr	r3, [pc, #640]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a9f      	ldr	r2, [pc, #636]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b9d      	ldr	r3, [pc, #628]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
 80006fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
 8000702:	4b99      	ldr	r3, [pc, #612]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a98      	ldr	r2, [pc, #608]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b96      	ldr	r3, [pc, #600]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	4b92      	ldr	r3, [pc, #584]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a91      	ldr	r2, [pc, #580]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b8f      	ldr	r3, [pc, #572]	; (8000968 <MX_GPIO_Init+0x2d4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b8b      	ldr	r3, [pc, #556]	; (8000968 <MX_GPIO_Init+0x2d4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a8a      	ldr	r2, [pc, #552]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b88      	ldr	r3, [pc, #544]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b84      	ldr	r3, [pc, #528]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a83      	ldr	r2, [pc, #524]	; (8000968 <MX_GPIO_Init+0x2d4>)
 800075c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b81      	ldr	r3, [pc, #516]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b7d      	ldr	r3, [pc, #500]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a7c      	ldr	r2, [pc, #496]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000778:	f043 0320 	orr.w	r3, r3, #32
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b7a      	ldr	r3, [pc, #488]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b76      	ldr	r3, [pc, #472]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a75      	ldr	r2, [pc, #468]	; (8000968 <MX_GPIO_Init+0x2d4>)
 8000794:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b73      	ldr	r3, [pc, #460]	; (8000968 <MX_GPIO_Init+0x2d4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b6f      	ldr	r3, [pc, #444]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a6e      	ldr	r2, [pc, #440]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b6c      	ldr	r3, [pc, #432]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b68      	ldr	r3, [pc, #416]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a67      	ldr	r2, [pc, #412]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80007cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b65      	ldr	r3, [pc, #404]	; (8000968 <MX_GPIO_Init+0x2d4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	210c      	movs	r1, #12
 80007e2:	4862      	ldr	r0, [pc, #392]	; (800096c <MX_GPIO_Init+0x2d8>)
 80007e4:	f000 ff34 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2130      	movs	r1, #48	; 0x30
 80007ec:	4860      	ldr	r0, [pc, #384]	; (8000970 <MX_GPIO_Init+0x2dc>)
 80007ee:	f000 ff2f 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	485f      	ldr	r0, [pc, #380]	; (8000974 <MX_GPIO_Init+0x2e0>)
 80007f8:	f000 ff2a 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	485d      	ldr	r0, [pc, #372]	; (8000978 <MX_GPIO_Init+0x2e4>)
 8000802:	f000 ff25 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2105      	movs	r1, #5
 800080a:	485c      	ldr	r0, [pc, #368]	; (800097c <MX_GPIO_Init+0x2e8>)
 800080c:	f000 ff20 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	485a      	ldr	r0, [pc, #360]	; (8000980 <MX_GPIO_Init+0x2ec>)
 8000816:	f000 ff1b 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	4859      	ldr	r0, [pc, #356]	; (8000984 <MX_GPIO_Init+0x2f0>)
 8000820:	f000 ff16 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000824:	230c      	movs	r3, #12
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000838:	4619      	mov	r1, r3
 800083a:	484c      	ldr	r0, [pc, #304]	; (800096c <MX_GPIO_Init+0x2d8>)
 800083c:	f000 fd5c 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000840:	2308      	movs	r3, #8
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000850:	2306      	movs	r3, #6
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000858:	4619      	mov	r1, r3
 800085a:	4848      	ldr	r0, [pc, #288]	; (800097c <MX_GPIO_Init+0x2e8>)
 800085c:	f000 fd4c 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000864:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000872:	4619      	mov	r1, r3
 8000874:	4841      	ldr	r0, [pc, #260]	; (800097c <MX_GPIO_Init+0x2e8>)
 8000876:	f000 fd3f 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800087a:	2330      	movs	r3, #48	; 0x30
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800087e:	2311      	movs	r3, #17
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088e:	4619      	mov	r1, r3
 8000890:	4837      	ldr	r0, [pc, #220]	; (8000970 <MX_GPIO_Init+0x2dc>)
 8000892:	f000 fd31 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800089a:	2311      	movs	r3, #17
 800089c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008aa:	4619      	mov	r1, r3
 80008ac:	4831      	ldr	r0, [pc, #196]	; (8000974 <MX_GPIO_Init+0x2e0>)
 80008ae:	f000 fd23 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008b6:	2311      	movs	r3, #17
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c6:	4619      	mov	r1, r3
 80008c8:	482b      	ldr	r0, [pc, #172]	; (8000978 <MX_GPIO_Init+0x2e4>)
 80008ca:	f000 fd15 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80008ce:	2305      	movs	r3, #5
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e2:	4619      	mov	r1, r3
 80008e4:	4825      	ldr	r0, [pc, #148]	; (800097c <MX_GPIO_Init+0x2e8>)
 80008e6:	f000 fd07 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80008fc:	2302      	movs	r3, #2
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000904:	4619      	mov	r1, r3
 8000906:	481a      	ldr	r0, [pc, #104]	; (8000970 <MX_GPIO_Init+0x2dc>)
 8000908:	f000 fcf6 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800090c:	2304      	movs	r3, #4
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091c:	4619      	mov	r1, r3
 800091e:	4816      	ldr	r0, [pc, #88]	; (8000978 <MX_GPIO_Init+0x2e4>)
 8000920:	f000 fcea 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000924:	2320      	movs	r3, #32
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000928:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000936:	4619      	mov	r1, r3
 8000938:	4813      	ldr	r0, [pc, #76]	; (8000988 <MX_GPIO_Init+0x2f4>)
 800093a:	f000 fcdd 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <MX_GPIO_Init+0x2ec>)
 8000956:	f000 fccf 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800095a:	2308      	movs	r3, #8
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	e012      	b.n	800098c <MX_GPIO_Init+0x2f8>
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40021000 	.word	0x40021000
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40022800 	.word	0x40022800
 8000978:	40021800 	.word	0x40021800
 800097c:	40020400 	.word	0x40020400
 8000980:	40021c00 	.word	0x40021c00
 8000984:	40020000 	.word	0x40020000
 8000988:	40022400 	.word	0x40022400
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000996:	4619      	mov	r1, r3
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <MX_GPIO_Init+0x314>)
 800099a:	f000 fcad 	bl	80012f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3740      	adds	r7, #64	; 0x40
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40020000 	.word	0x40020000

080009ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009be:	f000 f97d 	bl	8000cbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40001000 	.word	0x40001000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_MspInit+0x54>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a11      	ldr	r2, [pc, #68]	; (8000a30 <HAL_MspInit+0x54>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_MspInit+0x54>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_MspInit+0x54>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_MspInit+0x54>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_MspInit+0x54>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	f06f 0001 	mvn.w	r0, #1
 8000a22:	f000 fa47 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <HAL_TIM_Base_MspInit+0x3c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d10d      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_TIM_Base_MspInit+0x40>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <HAL_TIM_Base_MspInit+0x40>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_TIM_Base_MspInit+0x40>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40010000 	.word	0x40010000
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <HAL_InitTick+0xe4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a32      	ldr	r2, [pc, #200]	; (8000b5c <HAL_InitTick+0xe4>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <HAL_InitTick+0xe4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa4:	f107 0210 	add.w	r2, r7, #16
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fa30 	bl	8002f14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d103      	bne.n	8000ac6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000abe:	f002 fa15 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8000ac2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ac4:	e004      	b.n	8000ad0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac6:	f002 fa11 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8000aca:	4603      	mov	r3, r0
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <HAL_InitTick+0xe8>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	0c9b      	lsrs	r3, r3, #18
 8000ada:	3b01      	subs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <HAL_InitTick+0xec>)
 8000ae0:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <HAL_InitTick+0xf0>)
 8000ae2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <HAL_InitTick+0xec>)
 8000ae6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_InitTick+0xec>)
 8000aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_InitTick+0xec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_InitTick+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_InitTick+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b04:	4817      	ldr	r0, [pc, #92]	; (8000b64 <HAL_InitTick+0xec>)
 8000b06:	f002 fef9 	bl	80038fc <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d11b      	bne.n	8000b50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b18:	4812      	ldr	r0, [pc, #72]	; (8000b64 <HAL_InitTick+0xec>)
 8000b1a:	f002 ff3f 	bl	800399c <HAL_TIM_Base_Start_IT>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d111      	bne.n	8000b50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b2c:	2036      	movs	r0, #54	; 0x36
 8000b2e:	f000 f9dd 	bl	8000eec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d808      	bhi.n	8000b4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2036      	movs	r0, #54	; 0x36
 8000b3e:	f000 f9b9 	bl	8000eb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_InitTick+0xf4>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e002      	b.n	8000b50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3738      	adds	r7, #56	; 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	20000130 	.word	0x20000130
 8000b68:	40001000 	.word	0x40001000
 8000b6c:	20000004 	.word	0x20000004

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM6_DAC_IRQHandler+0x10>)
 8000ba2:	f002 ff6b 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000130 	.word	0x20000130

08000bb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <OTG_FS_IRQHandler+0x10>)
 8000bb6:	f000 fd64 	bl	8001682 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000268 	.word	0x20000268

08000bc4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <LTDC_IRQHandler+0x10>)
 8000bca:	f001 fe85 	bl	80028d8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000088 	.word	0x20000088

08000bd8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA2D_IRQHandler+0x10>)
 8000bde:	f000 f993 	bl	8000f08 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000002c 	.word	0x2000002c

08000bec <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <DSI_IRQHandler+0x10>)
 8000bf2:	f000 fa99 	bl	8001128 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000006c 	.word	0x2000006c

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4e:	f7ff ffd7 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f004 fdb3 	bl	80057bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc61 	bl	800051c <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c68:	08005870 	.word	0x08005870
  ldr r2, =_sbss
 8000c6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c70:	2000056c 	.word	0x2000056c

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f8fc 	bl	8000e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fee6 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fe96 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000178 	.word	0x20000178

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000178 	.word	0x20000178

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff4c 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec6:	f7ff ff61 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	f7ff ffb1 	bl	8000e38 <NVIC_EncodePriority>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff80 	bl	8000de4 <__NVIC_SetPriority>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff54 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d026      	beq.n	8000f78 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d021      	beq.n	8000f78 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f42:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f48:	f043 0201 	orr.w	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2201      	movs	r2, #1
 8000f56:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d026      	beq.n	8000fd0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d021      	beq.n	8000fd0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa8:	f043 0202 	orr.w	r2, r3, #2
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d026      	beq.n	8001028 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d021      	beq.n	8001028 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ff2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001000:	f043 0204 	orr.w	r2, r3, #4
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2204      	movs	r2, #4
 800100c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	2b00      	cmp	r3, #0
 8001030:	d013      	beq.n	800105a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00e      	beq.n	800105a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2204      	movs	r2, #4
 8001052:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f853 	bl	8001100 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d024      	beq.n	80010ae <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106a:	2b00      	cmp	r3, #0
 800106c:	d01f      	beq.n	80010ae <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800107c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2202      	movs	r2, #2
 8001084:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d01f      	beq.n	80010f8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d01a      	beq.n	80010f8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010d0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2210      	movs	r2, #16
 80010d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f80e 	bl	8001114 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00f      	beq.n	8001160 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2201      	movs	r2, #1
 8001156:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f8ad 	bl	80012ba <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00f      	beq.n	8001190 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d007      	beq.n	8001190 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2202      	movs	r2, #2
 8001186:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f89f 	bl	80012ce <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 808c 	beq.w	80012b2 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80011a2:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80011ba:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	4013      	ands	r3, r2
 80011c8:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f043 0202 	orr.w	r2, r3, #2
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f043 0204 	orr.w	r2, r3, #4
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f043 0208 	orr.w	r2, r3, #8
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f043 0210 	orr.w	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f043 0220 	orr.w	r2, r3, #32
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f818 	bl	80012e2 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	e177      	b.n	8001604 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	429a      	cmp	r2, r3
 800132e:	f040 8166 	bne.w	80015fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b01      	cmp	r3, #1
 800133c:	d005      	beq.n	800134a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	2b02      	cmp	r3, #2
 8001348:	d130      	bne.n	80013ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 0201 	and.w	r2, r3, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d017      	beq.n	80013e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d123      	bne.n	800143c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	69b9      	ldr	r1, [r7, #24]
 8001438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80c0 	beq.w	80015fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b66      	ldr	r3, [pc, #408]	; (800161c <HAL_GPIO_Init+0x324>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a65      	ldr	r2, [pc, #404]	; (800161c <HAL_GPIO_Init+0x324>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b63      	ldr	r3, [pc, #396]	; (800161c <HAL_GPIO_Init+0x324>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149a:	4a61      	ldr	r2, [pc, #388]	; (8001620 <HAL_GPIO_Init+0x328>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a58      	ldr	r2, [pc, #352]	; (8001624 <HAL_GPIO_Init+0x32c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d037      	beq.n	8001536 <HAL_GPIO_Init+0x23e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a57      	ldr	r2, [pc, #348]	; (8001628 <HAL_GPIO_Init+0x330>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d031      	beq.n	8001532 <HAL_GPIO_Init+0x23a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a56      	ldr	r2, [pc, #344]	; (800162c <HAL_GPIO_Init+0x334>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d02b      	beq.n	800152e <HAL_GPIO_Init+0x236>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a55      	ldr	r2, [pc, #340]	; (8001630 <HAL_GPIO_Init+0x338>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x232>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a54      	ldr	r2, [pc, #336]	; (8001634 <HAL_GPIO_Init+0x33c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x22e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a53      	ldr	r2, [pc, #332]	; (8001638 <HAL_GPIO_Init+0x340>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x22a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_GPIO_Init+0x344>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x226>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a51      	ldr	r2, [pc, #324]	; (8001640 <HAL_GPIO_Init+0x348>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x222>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a50      	ldr	r2, [pc, #320]	; (8001644 <HAL_GPIO_Init+0x34c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x21e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4f      	ldr	r2, [pc, #316]	; (8001648 <HAL_GPIO_Init+0x350>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x21a>
 800150e:	2309      	movs	r3, #9
 8001510:	e012      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001512:	230a      	movs	r3, #10
 8001514:	e010      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001516:	2308      	movs	r3, #8
 8001518:	e00e      	b.n	8001538 <HAL_GPIO_Init+0x240>
 800151a:	2307      	movs	r3, #7
 800151c:	e00c      	b.n	8001538 <HAL_GPIO_Init+0x240>
 800151e:	2306      	movs	r3, #6
 8001520:	e00a      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001522:	2305      	movs	r3, #5
 8001524:	e008      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001526:	2304      	movs	r3, #4
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x240>
 800152a:	2303      	movs	r3, #3
 800152c:	e004      	b.n	8001538 <HAL_GPIO_Init+0x240>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x240>
 8001536:	2300      	movs	r3, #0
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	f002 0203 	and.w	r2, r2, #3
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4093      	lsls	r3, r2
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001548:	4935      	ldr	r1, [pc, #212]	; (8001620 <HAL_GPIO_Init+0x328>)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_GPIO_Init+0x354>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157a:	4a34      	ldr	r2, [pc, #208]	; (800164c <HAL_GPIO_Init+0x354>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001580:	4b32      	ldr	r3, [pc, #200]	; (800164c <HAL_GPIO_Init+0x354>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <HAL_GPIO_Init+0x354>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_GPIO_Init+0x354>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <HAL_GPIO_Init+0x354>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_GPIO_Init+0x354>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_GPIO_Init+0x354>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3301      	adds	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	f67f ae84 	bls.w	8001314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40013800 	.word	0x40013800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020400 	.word	0x40020400
 800162c:	40020800 	.word	0x40020800
 8001630:	40020c00 	.word	0x40020c00
 8001634:	40021000 	.word	0x40021000
 8001638:	40021400 	.word	0x40021400
 800163c:	40021800 	.word	0x40021800
 8001640:	40021c00 	.word	0x40021c00
 8001644:	40022000 	.word	0x40022000
 8001648:	40022400 	.word	0x40022400
 800164c:	40013c00 	.word	0x40013c00

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800166c:	e003      	b.n	8001676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fcc4 	bl	8004026 <USB_GetMode>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	f040 80f6 	bne.w	8001892 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fca8 	bl	8004000 <USB_ReadInterrupts>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80ec 	beq.w	8001890 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 fc9f 	bl	8004000 <USB_ReadInterrupts>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016cc:	d104      	bne.n	80016d8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016d6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 fc8f 	bl	8004000 <USB_ReadInterrupts>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016ec:	d104      	bne.n	80016f8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016f6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fc7f 	bl	8004000 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800170c:	d104      	bne.n	8001718 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001716:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f002 fc6f 	bl	8004000 <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b02      	cmp	r3, #2
 800172a:	d103      	bne.n	8001734 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2202      	movs	r2, #2
 8001732:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fc61 	bl	8004000 <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001748:	d11c      	bne.n	8001784 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001752:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10f      	bne.n	8001784 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001764:	2110      	movs	r1, #16
 8001766:	6938      	ldr	r0, [r7, #16]
 8001768:	f002 fb8e 	bl	8003e88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800176c:	6938      	ldr	r0, [r7, #16]
 800176e:	f002 fbbf 	bl	8003ef0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2101      	movs	r1, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fc62 	bl	8004042 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f003 ff98 	bl	80056b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fc39 	bl	8004000 <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001798:	d102      	bne.n	80017a0 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f001 f829 	bl	80027f2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 fc2b 	bl	8004000 <USB_ReadInterrupts>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d106      	bne.n	80017c2 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f003 ff61 	bl	800567c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2208      	movs	r2, #8
 80017c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fc1a 	bl	8004000 <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d101      	bne.n	80017da <HAL_HCD_IRQHandler+0x158>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_HCD_IRQHandler+0x15a>
 80017da:	2300      	movs	r3, #0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0210 	bic.w	r2, r2, #16
 80017ee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 ff2c 	bl	800264e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0210 	orr.w	r2, r2, #16
 8001804:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fbf8 	bl	8004000 <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800181a:	d13a      	bne.n	8001892 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fc48 	bl	80040b6 <USB_HC_ReadInterrupt>
 8001826:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e025      	b.n	800187a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d018      	beq.n	8001874 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001858:	d106      	bne.n	8001868 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f836 	bl	80018d2 <HCD_HC_IN_IRQHandler>
 8001866:	e005      	b.n	8001874 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4619      	mov	r1, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fb84 	bl	8001f7c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	429a      	cmp	r2, r3
 8001882:	d3d4      	bcc.n	800182e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800188c:	615a      	str	r2, [r3, #20]
 800188e:	e000      	b.n	8001892 <HAL_HCD_IRQHandler+0x210>
      return;
 8001890:	bf00      	nop
    }
  }
}
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_HCD_Stop+0x16>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e00d      	b.n	80018ca <HAL_HCD_Stop+0x32>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fd08 	bl	80042d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d11a      	bne.n	8001938 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4413      	add	r3, r2
 800190a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190e:	461a      	mov	r2, r3
 8001910:	2304      	movs	r3, #4
 8001912:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3361      	adds	r3, #97	; 0x61
 8001922:	2206      	movs	r2, #6
 8001924:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fbd1 	bl	80040d8 <USB_HC_Halt>
 8001936:	e0af      	b.n	8001a98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	015a      	lsls	r2, r3, #5
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194e:	d11b      	bne.n	8001988 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4413      	add	r3, r2
 8001958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195c:	461a      	mov	r2, r3
 800195e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001962:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3361      	adds	r3, #97	; 0x61
 8001972:	2207      	movs	r2, #7
 8001974:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fba9 	bl	80040d8 <USB_HC_Halt>
 8001986:	e087      	b.n	8001a98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4413      	add	r3, r2
 8001990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	2b20      	cmp	r3, #32
 800199c:	d109      	bne.n	80019b2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	015a      	lsls	r2, r3, #5
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019aa:	461a      	mov	r2, r3
 80019ac:	2320      	movs	r3, #32
 80019ae:	6093      	str	r3, [r2, #8]
 80019b0:	e072      	b.n	8001a98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d11a      	bne.n	80019fe <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d4:	461a      	mov	r2, r3
 80019d6:	2308      	movs	r3, #8
 80019d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	212c      	movs	r1, #44	; 0x2c
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	3361      	adds	r3, #97	; 0x61
 80019e8:	2205      	movs	r2, #5
 80019ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 fb6e 	bl	80040d8 <USB_HC_Halt>
 80019fc:	e04c      	b.n	8001a98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a14:	d11b      	bne.n	8001a4e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a22:	461a      	mov	r2, r3
 8001a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	3361      	adds	r3, #97	; 0x61
 8001a38:	2208      	movs	r2, #8
 8001a3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fb46 	bl	80040d8 <USB_HC_Halt>
 8001a4c:	e024      	b.n	8001a98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a60:	2b80      	cmp	r3, #128	; 0x80
 8001a62:	d119      	bne.n	8001a98 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	015a      	lsls	r2, r3, #5
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a70:	461a      	mov	r2, r3
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	212c      	movs	r1, #44	; 0x2c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	3361      	adds	r3, #97	; 0x61
 8001a84:	2206      	movs	r2, #6
 8001a86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fb20 	bl	80040d8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	015a      	lsls	r2, r3, #5
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aae:	d112      	bne.n	8001ad6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fb0c 	bl	80040d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001acc:	461a      	mov	r2, r3
 8001ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ad4:	e24e      	b.n	8001f74 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	f040 80df 	bne.w	8001cac <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d019      	beq.n	8001b2a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3348      	adds	r3, #72	; 0x48
 8001b04:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	0159      	lsls	r1, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	440b      	add	r3, r1
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b18:	1ad2      	subs	r2, r2, r3
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	202c      	movs	r0, #44	; 0x2c
 8001b20:	fb00 f303 	mul.w	r3, r0, r3
 8001b24:	440b      	add	r3, r1
 8001b26:	3350      	adds	r3, #80	; 0x50
 8001b28:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	3361      	adds	r3, #97	; 0x61
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	335c      	adds	r3, #92	; 0x5c
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	333f      	adds	r3, #63	; 0x3f
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d009      	beq.n	8001b88 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	333f      	adds	r3, #63	; 0x3f
 8001b82:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d111      	bne.n	8001bac <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 faa0 	bl	80040d8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	6093      	str	r3, [r2, #8]
 8001baa:	e03a      	b.n	8001c22 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	333f      	adds	r3, #63	; 0x3f
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d009      	beq.n	8001bd4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	333f      	adds	r3, #63	; 0x3f
 8001bce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d126      	bne.n	8001c22 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	0151      	lsls	r1, r2, #5
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	440a      	add	r2, r1
 8001bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bf2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	212c      	movs	r1, #44	; 0x2c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3360      	adds	r3, #96	; 0x60
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	b2d9      	uxtb	r1, r3
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	202c      	movs	r0, #44	; 0x2c
 8001c10:	fb00 f303 	mul.w	r3, r0, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3360      	adds	r3, #96	; 0x60
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f003 fd57 	bl	80056d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d12b      	bne.n	8001c82 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3348      	adds	r3, #72	; 0x48
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	202c      	movs	r0, #44	; 0x2c
 8001c40:	fb00 f202 	mul.w	r2, r0, r2
 8001c44:	440a      	add	r2, r1
 8001c46:	3240      	adds	r2, #64	; 0x40
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 818e 	beq.w	8001f74 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3354      	adds	r3, #84	; 0x54
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2d8      	uxtb	r0, r3
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	212c      	movs	r1, #44	; 0x2c
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3354      	adds	r3, #84	; 0x54
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	701a      	strb	r2, [r3, #0]
}
 8001c80:	e178      	b.n	8001f74 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3354      	adds	r3, #84	; 0x54
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	f083 0301 	eor.w	r3, r3, #1
 8001c96:	b2d8      	uxtb	r0, r3
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	212c      	movs	r1, #44	; 0x2c
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3354      	adds	r3, #84	; 0x54
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	701a      	strb	r2, [r3, #0]
}
 8001caa:	e163      	b.n	8001f74 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	f040 80f6 	bne.w	8001eb0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3361      	adds	r3, #97	; 0x61
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d109      	bne.n	8001cec <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3360      	adds	r3, #96	; 0x60
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e0c9      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3361      	adds	r3, #97	; 0x61
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d109      	bne.n	8001d14 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3360      	adds	r3, #96	; 0x60
 8001d0e:	2205      	movs	r2, #5
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e0b5      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	212c      	movs	r1, #44	; 0x2c
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3361      	adds	r3, #97	; 0x61
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b06      	cmp	r3, #6
 8001d26:	d009      	beq.n	8001d3c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	212c      	movs	r1, #44	; 0x2c
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	3361      	adds	r3, #97	; 0x61
 8001d36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d150      	bne.n	8001dde <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	335c      	adds	r3, #92	; 0x5c
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	202c      	movs	r0, #44	; 0x2c
 8001d54:	fb00 f303 	mul.w	r3, r0, r3
 8001d58:	440b      	add	r3, r1
 8001d5a:	335c      	adds	r3, #92	; 0x5c
 8001d5c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	335c      	adds	r3, #92	; 0x5c
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d912      	bls.n	8001d98 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	335c      	adds	r3, #92	; 0x5c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	212c      	movs	r1, #44	; 0x2c
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3360      	adds	r3, #96	; 0x60
 8001d92:	2204      	movs	r2, #4
 8001d94:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d96:	e073      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	3360      	adds	r3, #96	; 0x60
 8001da6:	2202      	movs	r2, #2
 8001da8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dc0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dc8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001ddc:	e050      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3361      	adds	r3, #97	; 0x61
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d122      	bne.n	8001e38 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3360      	adds	r3, #96	; 0x60
 8001e00:	2202      	movs	r2, #2
 8001e02:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e1a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e22:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e023      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3361      	adds	r3, #97	; 0x61
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b07      	cmp	r3, #7
 8001e4a:	d119      	bne.n	8001e80 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	335c      	adds	r3, #92	; 0x5c
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	202c      	movs	r0, #44	; 0x2c
 8001e64:	fb00 f303 	mul.w	r3, r0, r3
 8001e68:	440b      	add	r3, r1
 8001e6a:	335c      	adds	r3, #92	; 0x5c
 8001e6c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	212c      	movs	r1, #44	; 0x2c
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	3360      	adds	r3, #96	; 0x60
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2302      	movs	r3, #2
 8001e90:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	b2d9      	uxtb	r1, r3
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	202c      	movs	r0, #44	; 0x2c
 8001e9c:	fb00 f303 	mul.w	r3, r0, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3360      	adds	r3, #96	; 0x60
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f003 fc11 	bl	80056d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001eae:	e061      	b.n	8001f74 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d156      	bne.n	8001f74 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	333f      	adds	r3, #63	; 0x3f
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d111      	bne.n	8001efe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	212c      	movs	r1, #44	; 0x2c
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	335c      	adds	r3, #92	; 0x5c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 f8ee 	bl	80040d8 <USB_HC_Halt>
 8001efc:	e031      	b.n	8001f62 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	212c      	movs	r1, #44	; 0x2c
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	333f      	adds	r3, #63	; 0x3f
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	333f      	adds	r3, #63	; 0x3f
 8001f20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d11d      	bne.n	8001f62 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	212c      	movs	r1, #44	; 0x2c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	335c      	adds	r3, #92	; 0x5c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d110      	bne.n	8001f62 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3361      	adds	r3, #97	; 0x61
 8001f4e:	2203      	movs	r2, #3
 8001f50:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 f8bb 	bl	80040d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2310      	movs	r3, #16
 8001f72:	6093      	str	r3, [r2, #8]
}
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d11a      	bne.n	8001fe2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2304      	movs	r3, #4
 8001fbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3361      	adds	r3, #97	; 0x61
 8001fcc:	2206      	movs	r2, #6
 8001fce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 f87c 	bl	80040d8 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001fe0:	e331      	b.n	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d12e      	bne.n	8002056 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	461a      	mov	r2, r3
 8002006:	2320      	movs	r3, #32
 8002008:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	333d      	adds	r3, #61	; 0x3d
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	f040 8313 	bne.w	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	333d      	adds	r3, #61	; 0x3d
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3360      	adds	r3, #96	; 0x60
 8002040:	2202      	movs	r2, #2
 8002042:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f002 f842 	bl	80040d8 <USB_HC_Halt>
}
 8002054:	e2f7      	b.n	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206c:	d112      	bne.n	8002094 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	461a      	mov	r2, r3
 800207c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002080:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f002 f823 	bl	80040d8 <USB_HC_Halt>
}
 8002092:	e2d8      	b.n	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d140      	bne.n	800212c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	212c      	movs	r1, #44	; 0x2c
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	335c      	adds	r3, #92	; 0x5c
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b40      	cmp	r3, #64	; 0x40
 80020d0:	d111      	bne.n	80020f6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	212c      	movs	r1, #44	; 0x2c
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	333d      	adds	r3, #61	; 0x3d
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	461a      	mov	r2, r3
 80020f2:	2340      	movs	r3, #64	; 0x40
 80020f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2301      	movs	r3, #1
 8002106:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3361      	adds	r3, #97	; 0x61
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f001 ffd7 	bl	80040d8 <USB_HC_Halt>
}
 800212a:	e28c      	b.n	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213e:	2b40      	cmp	r3, #64	; 0x40
 8002140:	d12c      	bne.n	800219c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3361      	adds	r3, #97	; 0x61
 8002150:	2204      	movs	r2, #4
 8002152:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	333d      	adds	r3, #61	; 0x3d
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	335c      	adds	r3, #92	; 0x5c
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f001 ffa8 	bl	80040d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	461a      	mov	r2, r3
 8002196:	2340      	movs	r3, #64	; 0x40
 8002198:	6093      	str	r3, [r2, #8]
}
 800219a:	e254      	b.n	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d11a      	bne.n	80021e8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	461a      	mov	r2, r3
 80021c0:	2308      	movs	r3, #8
 80021c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3361      	adds	r3, #97	; 0x61
 80021d2:	2205      	movs	r2, #5
 80021d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 ff79 	bl	80040d8 <USB_HC_Halt>
}
 80021e6:	e22e      	b.n	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d140      	bne.n	8002280 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	335c      	adds	r3, #92	; 0x5c
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3361      	adds	r3, #97	; 0x61
 800221e:	2203      	movs	r2, #3
 8002220:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	333d      	adds	r3, #61	; 0x3d
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d112      	bne.n	800225c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	333c      	adds	r3, #60	; 0x3c
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	212c      	movs	r1, #44	; 0x2c
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	333d      	adds	r3, #61	; 0x3d
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f001 ff36 	bl	80040d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	4413      	add	r3, r2
 8002274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002278:	461a      	mov	r2, r3
 800227a:	2310      	movs	r3, #16
 800227c:	6093      	str	r3, [r2, #8]
}
 800227e:	e1e2      	b.n	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b80      	cmp	r3, #128	; 0x80
 8002294:	d164      	bne.n	8002360 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d111      	bne.n	80022c2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3361      	adds	r3, #97	; 0x61
 80022ac:	2206      	movs	r2, #6
 80022ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 ff0c 	bl	80040d8 <USB_HC_Halt>
 80022c0:	e044      	b.n	800234c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	335c      	adds	r3, #92	; 0x5c
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	202c      	movs	r0, #44	; 0x2c
 80022da:	fb00 f303 	mul.w	r3, r0, r3
 80022de:	440b      	add	r3, r1
 80022e0:	335c      	adds	r3, #92	; 0x5c
 80022e2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	335c      	adds	r3, #92	; 0x5c
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d920      	bls.n	800233a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	335c      	adds	r3, #92	; 0x5c
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3360      	adds	r3, #96	; 0x60
 8002318:	2204      	movs	r2, #4
 800231a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	b2d9      	uxtb	r1, r3
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	202c      	movs	r0, #44	; 0x2c
 8002326:	fb00 f303 	mul.w	r3, r0, r3
 800232a:	4413      	add	r3, r2
 800232c:	3360      	adds	r3, #96	; 0x60
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f003 f9cc 	bl	80056d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002338:	e008      	b.n	800234c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3360      	adds	r3, #96	; 0x60
 8002348:	2202      	movs	r2, #2
 800234a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	6093      	str	r3, [r2, #8]
}
 800235e:	e172      	b.n	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002376:	d11b      	bne.n	80023b0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3361      	adds	r3, #97	; 0x61
 8002386:	2208      	movs	r2, #8
 8002388:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f001 fe9f 	bl	80040d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	461a      	mov	r2, r3
 80023a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ac:	6093      	str	r3, [r2, #8]
}
 80023ae:	e14a      	b.n	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	f040 813f 	bne.w	8002646 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3361      	adds	r3, #97	; 0x61
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d17d      	bne.n	80024d8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3360      	adds	r3, #96	; 0x60
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	333f      	adds	r3, #63	; 0x3f
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d00a      	beq.n	8002418 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	333f      	adds	r3, #63	; 0x3f
 8002410:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002412:	2b03      	cmp	r3, #3
 8002414:	f040 8100 	bne.w	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d113      	bne.n	8002448 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3355      	adds	r3, #85	; 0x55
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f083 0301 	eor.w	r3, r3, #1
 8002434:	b2d8      	uxtb	r0, r3
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3355      	adds	r3, #85	; 0x55
 8002444:	4602      	mov	r2, r0
 8002446:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b01      	cmp	r3, #1
 800244e:	f040 80e3 	bne.w	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	334c      	adds	r3, #76	; 0x4c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80d8 	beq.w	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	334c      	adds	r3, #76	; 0x4c
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	202c      	movs	r0, #44	; 0x2c
 800247e:	fb00 f202 	mul.w	r2, r0, r2
 8002482:	440a      	add	r2, r1
 8002484:	3240      	adds	r2, #64	; 0x40
 8002486:	8812      	ldrh	r2, [r2, #0]
 8002488:	4413      	add	r3, r2
 800248a:	3b01      	subs	r3, #1
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	202c      	movs	r0, #44	; 0x2c
 8002492:	fb00 f202 	mul.w	r2, r0, r2
 8002496:	440a      	add	r2, r1
 8002498:	3240      	adds	r2, #64	; 0x40
 800249a:	8812      	ldrh	r2, [r2, #0]
 800249c:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80b5 	beq.w	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3355      	adds	r3, #85	; 0x55
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2d8      	uxtb	r0, r3
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3355      	adds	r3, #85	; 0x55
 80024d2:	4602      	mov	r2, r0
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e09f      	b.n	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3361      	adds	r3, #97	; 0x61
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d109      	bne.n	8002500 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	3360      	adds	r3, #96	; 0x60
 80024fa:	2202      	movs	r2, #2
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e08b      	b.n	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3361      	adds	r3, #97	; 0x61
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d109      	bne.n	8002528 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	3360      	adds	r3, #96	; 0x60
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e077      	b.n	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3361      	adds	r3, #97	; 0x61
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d109      	bne.n	8002550 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3360      	adds	r3, #96	; 0x60
 800254a:	2205      	movs	r2, #5
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e063      	b.n	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3361      	adds	r3, #97	; 0x61
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b06      	cmp	r3, #6
 8002562:	d009      	beq.n	8002578 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3361      	adds	r3, #97	; 0x61
 8002572:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002574:	2b08      	cmp	r3, #8
 8002576:	d14f      	bne.n	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	335c      	adds	r3, #92	; 0x5c
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	202c      	movs	r0, #44	; 0x2c
 8002590:	fb00 f303 	mul.w	r3, r0, r3
 8002594:	440b      	add	r3, r1
 8002596:	335c      	adds	r3, #92	; 0x5c
 8002598:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	335c      	adds	r3, #92	; 0x5c
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d912      	bls.n	80025d4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	335c      	adds	r3, #92	; 0x5c
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3360      	adds	r3, #96	; 0x60
 80025ce:	2204      	movs	r2, #4
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e021      	b.n	8002618 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	3360      	adds	r3, #96	; 0x60
 80025e2:	2202      	movs	r2, #2
 80025e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025fc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002604:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	461a      	mov	r2, r3
 8002626:	2302      	movs	r3, #2
 8002628:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	b2d9      	uxtb	r1, r3
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	202c      	movs	r0, #44	; 0x2c
 8002634:	fb00 f303 	mul.w	r3, r0, r3
 8002638:	4413      	add	r3, r2
 800263a:	3360      	adds	r3, #96	; 0x60
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f003 f845 	bl	80056d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002646:	bf00      	nop
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b08a      	sub	sp, #40	; 0x28
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	0c5b      	lsrs	r3, r3, #17
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002682:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d004      	beq.n	8002694 <HCD_RXQLVL_IRQHandler+0x46>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b05      	cmp	r3, #5
 800268e:	f000 80a9 	beq.w	80027e4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002692:	e0aa      	b.n	80027ea <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80a6 	beq.w	80027e8 <HCD_RXQLVL_IRQHandler+0x19a>
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3344      	adds	r3, #68	; 0x44
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 809b 	beq.w	80027e8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3350      	adds	r3, #80	; 0x50
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	441a      	add	r2, r3
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	202c      	movs	r0, #44	; 0x2c
 80026cc:	fb00 f303 	mul.w	r3, r0, r3
 80026d0:	440b      	add	r3, r1
 80026d2:	334c      	adds	r3, #76	; 0x4c
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d87a      	bhi.n	80027d0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3344      	adds	r3, #68	; 0x44
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	b292      	uxth	r2, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f001 fc2c 	bl	8003f50 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3344      	adds	r3, #68	; 0x44
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	441a      	add	r2, r3
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	202c      	movs	r0, #44	; 0x2c
 8002712:	fb00 f303 	mul.w	r3, r0, r3
 8002716:	440b      	add	r3, r1
 8002718:	3344      	adds	r3, #68	; 0x44
 800271a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3350      	adds	r3, #80	; 0x50
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	441a      	add	r2, r3
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	202c      	movs	r0, #44	; 0x2c
 8002736:	fb00 f303 	mul.w	r3, r0, r3
 800273a:	440b      	add	r3, r1
 800273c:	3350      	adds	r3, #80	; 0x50
 800273e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	0cdb      	lsrs	r3, r3, #19
 8002750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002754:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3340      	adds	r3, #64	; 0x40
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4293      	cmp	r3, r2
 800276c:	d13c      	bne.n	80027e8 <HCD_RXQLVL_IRQHandler+0x19a>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d039      	beq.n	80027e8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800278a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002792:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3354      	adds	r3, #84	; 0x54
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	f083 0301 	eor.w	r3, r3, #1
 80027ba:	b2d8      	uxtb	r0, r3
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3354      	adds	r3, #84	; 0x54
 80027ca:	4602      	mov	r2, r0
 80027cc:	701a      	strb	r2, [r3, #0]
      break;
 80027ce:	e00b      	b.n	80027e8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3360      	adds	r3, #96	; 0x60
 80027de:	2204      	movs	r2, #4
 80027e0:	701a      	strb	r2, [r3, #0]
      break;
 80027e2:	e001      	b.n	80027e8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80027e4:	bf00      	nop
 80027e6:	e000      	b.n	80027ea <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80027e8:	bf00      	nop
  }
}
 80027ea:	bf00      	nop
 80027ec:	3728      	adds	r7, #40	; 0x28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800281e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b02      	cmp	r3, #2
 8002828:	d10b      	bne.n	8002842 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f002 ff2f 	bl	8005698 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b08      	cmp	r3, #8
 800284a:	d132      	bne.n	80028b2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f043 0308 	orr.w	r3, r3, #8
 8002852:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b04      	cmp	r3, #4
 800285c:	d126      	bne.n	80028ac <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d113      	bne.n	800288e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800286c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002870:	d106      	bne.n	8002880 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f001 fbe2 	bl	8004042 <USB_InitFSLSPClkSel>
 800287e:	e011      	b.n	80028a4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f001 fbdb 	bl	8004042 <USB_InitFSLSPClkSel>
 800288c:	e00a      	b.n	80028a4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d106      	bne.n	80028a4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800289c:	461a      	mov	r2, r3
 800289e:	f64e 2360 	movw	r3, #60000	; 0xea60
 80028a2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f002 ff25 	bl	80056f4 <HAL_HCD_PortEnabled_Callback>
 80028aa:	e002      	b.n	80028b2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f002 ff2f 	bl	8005710 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d103      	bne.n	80028c4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f043 0320 	orr.w	r3, r3, #32
 80028c2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d023      	beq.n	8002942 <HAL_LTDC_IRQHandler+0x6a>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01e      	beq.n	8002942 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0204 	bic.w	r2, r2, #4
 8002912:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2204      	movs	r2, #4
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2204      	movs	r2, #4
 8002930:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f86f 	bl	8002a20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d023      	beq.n	8002994 <HAL_LTDC_IRQHandler+0xbc>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01e      	beq.n	8002994 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0202 	bic.w	r2, r2, #2
 8002964:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002974:	f043 0202 	orr.w	r2, r3, #2
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f846 	bl	8002a20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01b      	beq.n	80029d6 <HAL_LTDC_IRQHandler+0xfe>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d016      	beq.n	80029d6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2201      	movs	r2, #1
 80029be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f82f 	bl	8002a34 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <HAL_LTDC_IRQHandler+0x140>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0208 	bic.w	r2, r2, #8
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2208      	movs	r2, #8
 8002a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f818 	bl	8002a48 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_PWREx_EnableOverDrive+0x90>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_PWREx_EnableOverDrive+0x90>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_PWREx_EnableOverDrive+0x90>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a88:	f7fe f92c 	bl	8000ce4 <HAL_GetTick>
 8002a8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a8e:	e009      	b.n	8002aa4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a90:	f7fe f928 	bl	8000ce4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a9e:	d901      	bls.n	8002aa4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e01f      	b.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d1ee      	bne.n	8002a90 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab8:	f7fe f914 	bl	8000ce4 <HAL_GetTick>
 8002abc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002abe:	e009      	b.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ac0:	f7fe f910 	bl	8000ce4 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ace:	d901      	bls.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e007      	b.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae0:	d1ee      	bne.n	8002ac0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	420e0040 	.word	0x420e0040
 8002af4:	40007000 	.word	0x40007000
 8002af8:	420e0044 	.word	0x420e0044

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0cc      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d90c      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	494d      	ldr	r1, [pc, #308]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d044      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d119      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e067      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4934      	ldr	r1, [pc, #208]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fe f87a 	bl	8000ce4 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fe f876 	bl	8000ce4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e04f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 020c 	and.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1eb      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d20c      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 f821 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490a      	ldr	r1, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fee8 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08005848 	.word	0x08005848
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b094      	sub	sp, #80	; 0x50
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd8:	2300      	movs	r3, #0
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce0:	4b79      	ldr	r3, [pc, #484]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	f200 80e1 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x34>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfa:	e0db      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d00:	e0db      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d06:	e0d8      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	2200      	movs	r2, #0
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
 8002d36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	0159      	lsls	r1, r3, #5
 8002d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4c:	0150      	lsls	r0, r2, #5
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4621      	mov	r1, r4
 8002d54:	1a51      	subs	r1, r2, r1
 8002d56:	6139      	str	r1, [r7, #16]
 8002d58:	4629      	mov	r1, r5
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	4651      	mov	r1, sl
 8002d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d76:	4651      	mov	r1, sl
 8002d78:	018a      	lsls	r2, r1, #6
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d80:	4659      	mov	r1, fp
 8002d82:	eb63 0901 	sbc.w	r9, r3, r1
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9a:	4690      	mov	r8, r2
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	eb18 0303 	adds.w	r3, r8, r3
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	462b      	mov	r3, r5
 8002da8:	eb49 0303 	adc.w	r3, r9, r3
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	024b      	lsls	r3, r1, #9
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	024a      	lsls	r2, r1, #9
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dce:	2200      	movs	r2, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd8:	f7fd fa12 	bl	8000200 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de4:	e058      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	4611      	mov	r1, r2
 8002df2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	f04f 0000 	mov.w	r0, #0
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	0159      	lsls	r1, r3, #5
 8002e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e12:	0150      	lsls	r0, r2, #5
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4641      	mov	r1, r8
 8002e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1e:	4649      	mov	r1, r9
 8002e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e38:	ebb2 040a 	subs.w	r4, r2, sl
 8002e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb45 0303 	adc.w	r3, r5, r3
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e82:	2200      	movs	r2, #0
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	61fa      	str	r2, [r7, #28]
 8002e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8c:	f7fd f9b8 	bl	8000200 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3750      	adds	r7, #80	; 0x50
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000000 	.word	0x20000000

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	08005858 	.word	0x08005858

08002f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	220f      	movs	r2, #15
 8002f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_RCC_GetClockConfig+0x60>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	601a      	str	r2, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40023c00 	.word	0x40023c00

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fa0:	4b66      	ldr	r3, [pc, #408]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	4963      	ldr	r1, [pc, #396]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002fc2:	4b5e      	ldr	r3, [pc, #376]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	495a      	ldr	r1, [pc, #360]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d075      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ffc:	4b50      	ldr	r3, [pc, #320]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003002:	f7fd fe6f 	bl	8000ce4 <HAL_GetTick>
 8003006:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003008:	e008      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800300a:	f7fd fe6b 	bl	8000ce4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e1dc      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301c:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	019a      	lsls	r2, r3, #6
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	071b      	lsls	r3, r3, #28
 8003040:	493e      	ldr	r1, [pc, #248]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01f      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003054:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	0f1b      	lsrs	r3, r3, #28
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	019a      	lsls	r2, r3, #6
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	431a      	orrs	r2, r3
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	071b      	lsls	r3, r3, #28
 8003074:	4931      	ldr	r1, [pc, #196]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800307e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003082:	f023 021f 	bic.w	r2, r3, #31
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	3b01      	subs	r3, #1
 800308c:	492b      	ldr	r1, [pc, #172]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	019a      	lsls	r2, r3, #6
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	071b      	lsls	r3, r3, #28
 80030b4:	4921      	ldr	r1, [pc, #132]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030bc:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030c2:	f7fd fe0f 	bl	8000ce4 <HAL_GetTick>
 80030c6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ca:	f7fd fe0b 	bl	8000ce4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e17c      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d112      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10c      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80ce 	beq.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003116:	f040 80c8 	bne.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003120:	f7fd fde0 	bl	8000ce4 <HAL_GetTick>
 8003124:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003126:	e00f      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003128:	f7fd fddc 	bl	8000ce4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d908      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e14d      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	42470068 	.word	0x42470068
 8003144:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003148:	4ba5      	ldr	r3, [pc, #660]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003154:	d0e8      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d02e      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003162:	4b9f      	ldr	r3, [pc, #636]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003174:	4b9a      	ldr	r3, [pc, #616]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	0f1b      	lsrs	r3, r3, #28
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	019a      	lsls	r2, r3, #6
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	431a      	orrs	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	071b      	lsls	r3, r3, #28
 800319e:	4990      	ldr	r1, [pc, #576]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031a6:	4b8e      	ldr	r3, [pc, #568]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80031a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	3b01      	subs	r3, #1
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	4989      	ldr	r1, [pc, #548]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02c      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80031cc:	4b84      	ldr	r3, [pc, #528]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	0c1b      	lsrs	r3, r3, #16
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	3301      	adds	r3, #1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031de:	4b80      	ldr	r3, [pc, #512]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	0e1b      	lsrs	r3, r3, #24
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	019a      	lsls	r2, r3, #6
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	3b01      	subs	r3, #1
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	431a      	orrs	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	061b      	lsls	r3, r3, #24
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	071b      	lsls	r3, r3, #28
 8003208:	4975      	ldr	r1, [pc, #468]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003210:	4b73      	ldr	r3, [pc, #460]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003216:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	4970      	ldr	r1, [pc, #448]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b00      	cmp	r3, #0
 8003230:	d024      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323a:	d11f      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800323c:	4b68      	ldr	r3, [pc, #416]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	0e1b      	lsrs	r3, r3, #24
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800324a:	4b65      	ldr	r3, [pc, #404]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	0f1b      	lsrs	r3, r3, #28
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	019a      	lsls	r2, r3, #6
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	3b01      	subs	r3, #1
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	431a      	orrs	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	431a      	orrs	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	071b      	lsls	r3, r3, #28
 8003274:	495a      	ldr	r1, [pc, #360]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800327c:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003282:	f7fd fd2f 	bl	8000ce4 <HAL_GetTick>
 8003286:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800328a:	f7fd fd2b 	bl	8000ce4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e09c      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a8:	d1ef      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8083 	beq.w	80033be <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	4b48      	ldr	r3, [pc, #288]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	4a47      	ldr	r2, [pc, #284]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80032c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c6:	6413      	str	r3, [r2, #64]	; 0x40
 80032c8:	4b45      	ldr	r3, [pc, #276]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032d4:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a43      	ldr	r2, [pc, #268]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032e0:	f7fd fd00 	bl	8000ce4 <HAL_GetTick>
 80032e4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032e8:	f7fd fcfc 	bl	8000ce4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e06d      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d02f      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	429a      	cmp	r2, r3
 8003322:	d028      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003324:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800332e:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003334:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800333a:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003340:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d114      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800334c:	f7fd fcca 	bl	8000ce4 <HAL_GetTick>
 8003350:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fd fcc6 	bl	8000ce4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e035      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ee      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003382:	d10d      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	4911      	ldr	r1, [pc, #68]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
 800339e:	e005      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x434>
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80033a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033aa:	6093      	str	r3, [r2, #8]
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80033ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b8:	4909      	ldr	r1, [pc, #36]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80033d2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	42470070 	.word	0x42470070
 80033e8:	40007000 	.word	0x40007000
 80033ec:	42470e40 	.word	0x42470e40
 80033f0:	424711e0 	.word	0x424711e0

080033f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e273      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d075      	beq.n	80034fe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003412:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d00c      	beq.n	8003438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b85      	ldr	r3, [pc, #532]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003426:	2b08      	cmp	r3, #8
 8003428:	d112      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4b82      	ldr	r3, [pc, #520]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003436:	d10b      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d05b      	beq.n	80034fc <HAL_RCC_OscConfig+0x108>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d157      	bne.n	80034fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e24e      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x74>
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x98>
 8003472:	4b70      	ldr	r3, [pc, #448]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6f      	ldr	r2, [pc, #444]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6c      	ldr	r2, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 800348c:	4b69      	ldr	r3, [pc, #420]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a68      	ldr	r2, [pc, #416]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b66      	ldr	r3, [pc, #408]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a65      	ldr	r2, [pc, #404]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fd fc1a 	bl	8000ce4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fd fc16 	bl	8000ce4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e213      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b5b      	ldr	r3, [pc, #364]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xc0>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fd fc06 	bl	8000ce4 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fd fc02 	bl	8000ce4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	; 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1ff      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b51      	ldr	r3, [pc, #324]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0xe8>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d063      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b44      	ldr	r3, [pc, #272]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b41      	ldr	r3, [pc, #260]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1d3      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4937      	ldr	r1, [pc, #220]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e03a      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_RCC_OscConfig+0x244>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd fbbb 	bl	8000ce4 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003572:	f7fd fbb7 	bl	8000ce4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1b4      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4925      	ldr	r1, [pc, #148]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCC_OscConfig+0x244>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fd fb9a 	bl	8000ce4 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fd fb96 	bl	8000ce4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e193      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d036      	beq.n	800364c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <HAL_RCC_OscConfig+0x248>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fd fb7a 	bl	8000ce4 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fd fb76 	bl	8000ce4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e173      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x200>
 8003612:	e01b      	b.n	800364c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_OscConfig+0x248>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fd fb63 	bl	8000ce4 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00e      	b.n	8003640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003622:	f7fd fb5f 	bl	8000ce4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d907      	bls.n	8003640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e15c      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000
 800363c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b8a      	ldr	r3, [pc, #552]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ea      	bne.n	8003622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8097 	beq.w	8003788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b83      	ldr	r3, [pc, #524]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b7f      	ldr	r3, [pc, #508]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a7e      	ldr	r2, [pc, #504]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b7c      	ldr	r3, [pc, #496]	; (800386c <HAL_RCC_OscConfig+0x478>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b79      	ldr	r3, [pc, #484]	; (8003870 <HAL_RCC_OscConfig+0x47c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCC_OscConfig+0x47c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a75      	ldr	r2, [pc, #468]	; (8003870 <HAL_RCC_OscConfig+0x47c>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fd fb1f 	bl	8000ce4 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fd fb1b 	bl	8000ce4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e118      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <HAL_RCC_OscConfig+0x47c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x2ea>
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <HAL_RCC_OscConfig+0x478>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a65      	ldr	r2, [pc, #404]	; (800386c <HAL_RCC_OscConfig+0x478>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	e01c      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x30c>
 80036e6:	4b61      	ldr	r3, [pc, #388]	; (800386c <HAL_RCC_OscConfig+0x478>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a60      	ldr	r2, [pc, #384]	; (800386c <HAL_RCC_OscConfig+0x478>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
 80036f2:	4b5e      	ldr	r3, [pc, #376]	; (800386c <HAL_RCC_OscConfig+0x478>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a5d      	ldr	r2, [pc, #372]	; (800386c <HAL_RCC_OscConfig+0x478>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 8003700:	4b5a      	ldr	r3, [pc, #360]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a59      	ldr	r2, [pc, #356]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	4b57      	ldr	r3, [pc, #348]	; (800386c <HAL_RCC_OscConfig+0x478>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a56      	ldr	r2, [pc, #344]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fd fae0 	bl	8000ce4 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fd fadc 	bl	8000ce4 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0d7      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	4b4b      	ldr	r3, [pc, #300]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0ee      	beq.n	8003728 <HAL_RCC_OscConfig+0x334>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd faca 	bl	8000ce4 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fd fac6 	bl	8000ce4 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0c1      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376a:	4b40      	ldr	r3, [pc, #256]	; (800386c <HAL_RCC_OscConfig+0x478>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_RCC_OscConfig+0x478>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	4a3a      	ldr	r2, [pc, #232]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80ad 	beq.w	80038ec <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003792:	4b36      	ldr	r3, [pc, #216]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d060      	beq.n	8003860 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d145      	bne.n	8003832 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b33      	ldr	r3, [pc, #204]	; (8003874 <HAL_RCC_OscConfig+0x480>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd fa9a 	bl	8000ce4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fd fa96 	bl	8000ce4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e093      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b29      	ldr	r3, [pc, #164]	; (800386c <HAL_RCC_OscConfig+0x478>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	071b      	lsls	r3, r3, #28
 80037fe:	491b      	ldr	r1, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <HAL_RCC_OscConfig+0x480>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd fa6b 	bl	8000ce4 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003812:	f7fd fa67 	bl	8000ce4 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e064      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x41e>
 8003830:	e05c      	b.n	80038ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_RCC_OscConfig+0x480>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd fa54 	bl	8000ce4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fd fa50 	bl	8000ce4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e04d      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_OscConfig+0x478>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x44c>
 800385e:	e045      	b.n	80038ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d107      	bne.n	8003878 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e040      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
 800386c:	40023800 	.word	0x40023800
 8003870:	40007000 	.word	0x40007000
 8003874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_RCC_OscConfig+0x504>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d030      	beq.n	80038e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d129      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d122      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038a8:	4013      	ands	r3, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d119      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	3b01      	subs	r3, #1
 80038c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d10f      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800

080038fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e041      	b.n	8003992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd f886 	bl	8000a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 f9ce 	bl	8003cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d001      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e04e      	b.n	8003a52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <HAL_TIM_Base_Start_IT+0xc4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d01d      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <HAL_TIM_Base_Start_IT+0xc8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_TIM_Base_Start_IT+0xcc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d111      	bne.n	8003a40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d010      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3e:	e007      	b.n	8003a50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40000c00 	.word	0x40000c00
 8003a70:	40010400 	.word	0x40010400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40001800 	.word	0x40001800

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0202 	mvn.w	r2, #2
 8003aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f8ee 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8e0 	bl	8003c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f8f1 	bl	8003cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8c4 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8b6 	bl	8003c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8c7 	bl	8003cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f89a 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f88c 	bl	8003c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f89d 	bl	8003cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0210 	mvn.w	r2, #16
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f870 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f862 	bl	8003c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f873 	bl	8003cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0201 	mvn.w	r2, #1
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fc fed6 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f902 	bl	8003e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f838 	bl	8003cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0220 	mvn.w	r2, #32
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8cc 	bl	8003e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a40      	ldr	r2, [pc, #256]	; (8003df0 <TIM_Base_SetConfig+0x114>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfa:	d00f      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a3d      	ldr	r2, [pc, #244]	; (8003df4 <TIM_Base_SetConfig+0x118>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a3c      	ldr	r2, [pc, #240]	; (8003df8 <TIM_Base_SetConfig+0x11c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a3b      	ldr	r2, [pc, #236]	; (8003dfc <TIM_Base_SetConfig+0x120>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a3a      	ldr	r2, [pc, #232]	; (8003e00 <TIM_Base_SetConfig+0x124>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d108      	bne.n	8003d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a2f      	ldr	r2, [pc, #188]	; (8003df0 <TIM_Base_SetConfig+0x114>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d027      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	; (8003df4 <TIM_Base_SetConfig+0x118>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d023      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <TIM_Base_SetConfig+0x11c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01f      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <TIM_Base_SetConfig+0x120>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <TIM_Base_SetConfig+0x124>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d017      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <TIM_Base_SetConfig+0x128>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00f      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a26      	ldr	r2, [pc, #152]	; (8003e0c <TIM_Base_SetConfig+0x130>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a25      	ldr	r2, [pc, #148]	; (8003e10 <TIM_Base_SetConfig+0x134>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a24      	ldr	r2, [pc, #144]	; (8003e14 <TIM_Base_SetConfig+0x138>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <TIM_Base_SetConfig+0x114>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_Base_SetConfig+0xf8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <TIM_Base_SetConfig+0x124>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d103      	bne.n	8003ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	615a      	str	r2, [r3, #20]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40000c00 	.word	0x40000c00
 8003e00:	40010400 	.word	0x40010400
 8003e04:	40014000 	.word	0x40014000
 8003e08:	40014400 	.word	0x40014400
 8003e0c:	40014800 	.word	0x40014800
 8003e10:	40001800 	.word	0x40001800
 8003e14:	40001c00 	.word	0x40001c00
 8003e18:	40002000 	.word	0x40002000

08003e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 0201 	bic.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a13      	ldr	r2, [pc, #76]	; (8003eec <USB_FlushTxFifo+0x64>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e01b      	b.n	8003ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	daf2      	bge.n	8003e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	019b      	lsls	r3, r3, #6
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a08      	ldr	r2, [pc, #32]	; (8003eec <USB_FlushTxFifo+0x64>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e006      	b.n	8003ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d0f0      	beq.n	8003ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	00030d40 	.word	0x00030d40

08003ef0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a11      	ldr	r2, [pc, #68]	; (8003f4c <USB_FlushRxFifo+0x5c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e018      	b.n	8003f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	daf2      	bge.n	8003efc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3301      	adds	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <USB_FlushRxFifo+0x5c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e006      	b.n	8003f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d0f0      	beq.n	8003f20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	00030d40 	.word	0x00030d40

08003f50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b08b      	sub	sp, #44	; 0x2c
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	623b      	str	r3, [r7, #32]
 8003f7a:	e014      	b.n	8003fa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	3301      	adds	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	3301      	adds	r3, #1
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	623b      	str	r3, [r7, #32]
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d3e6      	bcc.n	8003f7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fae:	8bfb      	ldrh	r3, [r7, #30]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01e      	beq.n	8003ff2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f107 0310 	add.w	r3, r7, #16
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	701a      	strb	r2, [r3, #0]
      i++;
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003fe6:	8bfb      	ldrh	r3, [r7, #30]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fec:	8bfb      	ldrh	r3, [r7, #30]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1ea      	bne.n	8003fc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	372c      	adds	r7, #44	; 0x2c
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4013      	ands	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004018:	68fb      	ldr	r3, [r7, #12]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0301 	and.w	r3, r3, #1
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004060:	f023 0303 	bic.w	r3, r3, #3
 8004064:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	68f9      	ldr	r1, [r7, #12]
 8004076:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d107      	bne.n	8004094 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800408a:	461a      	mov	r2, r3
 800408c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004090:	6053      	str	r3, [r2, #4]
 8004092:	e009      	b.n	80040a8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d106      	bne.n	80040a8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040a0:	461a      	mov	r2, r3
 80040a2:	f241 7370 	movw	r3, #6000	; 0x1770
 80040a6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	b29b      	uxth	r3, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0c9b      	lsrs	r3, r3, #18
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0fdb      	lsrs	r3, r3, #31
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b20      	cmp	r3, #32
 8004126:	d104      	bne.n	8004132 <USB_HC_Halt+0x5a>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e0c8      	b.n	80042c4 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <USB_HC_Halt+0x66>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d163      	bne.n	8004206 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	440a      	add	r2, r1
 8004154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800415c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 80ab 	bne.w	80042c2 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d133      	bne.n	80041e0 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	440a      	add	r2, r1
 800418e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004196:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041b6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3301      	adds	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041c4:	d81d      	bhi.n	8004202 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041dc:	d0ec      	beq.n	80041b8 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041de:	e070      	b.n	80042c2 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041fe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004200:	e05f      	b.n	80042c2 <USB_HC_Halt+0x1ea>
            break;
 8004202:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004204:	e05d      	b.n	80042c2 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004224:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d133      	bne.n	800429e <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	440a      	add	r2, r1
 800424c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004254:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	440a      	add	r2, r1
 800426c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004274:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3301      	adds	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004282:	d81d      	bhi.n	80042c0 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	4413      	add	r3, r2
 800428c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800429a:	d0ec      	beq.n	8004276 <USB_HC_Halt+0x19e>
 800429c:	e011      	b.n	80042c2 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e000      	b.n	80042c2 <USB_HC_Halt+0x1ea>
          break;
 80042c0:	bf00      	nop
    }
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3724      	adds	r7, #36	; 0x24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fdbe 	bl	8003e66 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042ea:	2110      	movs	r1, #16
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fdcb 	bl	8003e88 <USB_FlushTxFifo>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff fdf7 	bl	8003ef0 <USB_FlushRxFifo>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800430c:	2300      	movs	r3, #0
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	e01f      	b.n	8004352 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	4413      	add	r3, r2
 800431a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004328:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004330:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004338:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004346:	461a      	mov	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	3301      	adds	r3, #1
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d9dc      	bls.n	8004312 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e034      	b.n	80043c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004374:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800437c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004384:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3301      	adds	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a4:	d80c      	bhi.n	80043c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043bc:	d0ec      	beq.n	8004398 <USB_StopHost+0xc8>
 80043be:	e000      	b.n	80043c2 <USB_StopHost+0xf2>
        break;
 80043c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3301      	adds	r3, #1
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0f      	cmp	r3, #15
 80043cc:	d9c7      	bls.n	800435e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043d4:	461a      	mov	r2, r3
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
 80043da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f04f 32ff 	mov.w	r2, #4294967295
 80043e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fd2d 	bl	8003e44 <USB_EnableGlobalInt>

  return ret;
 80043ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f804 	bl	8004418 <USBH_HandleSof>
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b0b      	cmp	r3, #11
 8004428:	d10a      	bne.n	8004440 <USBH_HandleSof+0x28>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
  }
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800446c:	2200      	movs	r2, #0
 800446e:	4619      	mov	r1, r3
 8004470:	f000 f8ae 	bl	80045d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004474:	bf00      	nop
}
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800448c:	bf00      	nop
}
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80044cc:	2200      	movs	r2, #0
 80044ce:	4619      	mov	r1, r3
 80044d0:	f000 f87e 	bl	80045d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f001 f914 	bl	800572c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	791b      	ldrb	r3, [r3, #4]
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f830 	bl	8004570 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	795b      	ldrb	r3, [r3, #5]
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f82a 	bl	8004570 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8004530:	2200      	movs	r2, #0
 8004532:	4619      	mov	r1, r3
 8004534:	f000 f84c 	bl	80045d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800455e:	2200      	movs	r2, #0
 8004560:	4619      	mov	r1, r3
 8004562:	f000 f835 	bl	80045d0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	2b0f      	cmp	r3, #15
 8004580:	d80d      	bhi.n	800459e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	33e0      	adds	r3, #224	; 0xe0
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	33e0      	adds	r3, #224	; 0xe0
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045b2:	f3ef 8305 	mrs	r3, IPSR
 80045b6:	607b      	str	r3, [r7, #4]
  return(result);
 80045b8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <osMessagePut+0x1e>
    ticks = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80045ee:	f7ff ffdd 	bl	80045ac <inHandlerMode>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d018      	beq.n	800462a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80045f8:	f107 0210 	add.w	r2, r7, #16
 80045fc:	f107 0108 	add.w	r1, r7, #8
 8004600:	2300      	movs	r3, #0
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f9aa 	bl	800495c <xQueueGenericSendFromISR>
 8004608:	4603      	mov	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d001      	beq.n	8004612 <osMessagePut+0x42>
      return osErrorOS;
 800460e:	23ff      	movs	r3, #255	; 0xff
 8004610:	e018      	b.n	8004644 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d014      	beq.n	8004642 <osMessagePut+0x72>
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <osMessagePut+0x7c>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	e00b      	b.n	8004642 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800462a:	f107 0108 	add.w	r1, r7, #8
 800462e:	2300      	movs	r3, #0
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f894 	bl	8004760 <xQueueGenericSend>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <osMessagePut+0x72>
      return osErrorOS;
 800463e:	23ff      	movs	r3, #255	; 0xff
 8004640:	e000      	b.n	8004644 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d103      	bne.n	80046b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e00c      	b.n	80046d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3308      	adds	r3, #8
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e002      	b.n	80046c6 <vListInsert+0x2e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d2f6      	bcs.n	80046c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	601a      	str	r2, [r3, #0]
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
 8004720:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6852      	ldr	r2, [r2, #4]
 800472a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	429a      	cmp	r2, r3
 8004734:	d103      	bne.n	800473e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	1e5a      	subs	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08e      	sub	sp, #56	; 0x38
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800476e:	2300      	movs	r3, #0
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <xQueueGenericSend+0x40>
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <xQueueGenericSend+0x44>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <xQueueGenericSend+0x46>
 80047a4:	2300      	movs	r3, #0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <xQueueGenericSend+0x60>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d103      	bne.n	80047ce <xQueueGenericSend+0x6e>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <xQueueGenericSend+0x72>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericSend+0x74>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xQueueGenericSend+0x8e>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	623b      	str	r3, [r7, #32]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ee:	f000 fd31 	bl	8005254 <xTaskGetSchedulerState>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <xQueueGenericSend+0x9e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <xQueueGenericSend+0xa2>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <xQueueGenericSend+0xa4>
 8004802:	2300      	movs	r3, #0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <xQueueGenericSend+0xbe>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	61fb      	str	r3, [r7, #28]
}
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800481e:	f000 fe3b 	bl	8005498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <xQueueGenericSend+0xd4>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d129      	bne.n	8004888 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800483a:	f000 f92a 	bl	8004a92 <prvCopyDataToQueue>
 800483e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	3324      	adds	r3, #36	; 0x24
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fbfb 	bl	8005048 <xTaskRemoveFromEventList>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d013      	beq.n	8004880 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004858:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <xQueueGenericSend+0x1f8>)
 800485a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	e00a      	b.n	8004880 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004870:	4b39      	ldr	r3, [pc, #228]	; (8004958 <xQueueGenericSend+0x1f8>)
 8004872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004880:	f000 fe3a 	bl	80054f8 <vPortExitCritical>
				return pdPASS;
 8004884:	2301      	movs	r3, #1
 8004886:	e063      	b.n	8004950 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800488e:	f000 fe33 	bl	80054f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004892:	2300      	movs	r3, #0
 8004894:	e05c      	b.n	8004950 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fc33 	bl	800510c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048a6:	2301      	movs	r3, #1
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048aa:	f000 fe25 	bl	80054f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048ae:	f000 f9c5 	bl	8004c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048b2:	f000 fdf1 	bl	8005498 <vPortEnterCritical>
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048bc:	b25b      	sxtb	r3, r3
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d103      	bne.n	80048cc <xQueueGenericSend+0x16c>
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d103      	bne.n	80048e2 <xQueueGenericSend+0x182>
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048e2:	f000 fe09 	bl	80054f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048e6:	1d3a      	adds	r2, r7, #4
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	4611      	mov	r1, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fc22 	bl	8005138 <xTaskCheckForTimeOut>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d124      	bne.n	8004944 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048fc:	f000 f985 	bl	8004c0a <prvIsQueueFull>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d018      	beq.n	8004938 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	3310      	adds	r3, #16
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fb76 	bl	8005000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004916:	f000 f926 	bl	8004b66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800491a:	f000 f99d 	bl	8004c58 <xTaskResumeAll>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f af7c 	bne.w	800481e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <xQueueGenericSend+0x1f8>)
 8004928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	e772      	b.n	800481e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800493a:	f000 f914 	bl	8004b66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800493e:	f000 f98b 	bl	8004c58 <xTaskResumeAll>
 8004942:	e76c      	b.n	800481e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004946:	f000 f90e 	bl	8004b66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800494a:	f000 f985 	bl	8004c58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800494e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004950:	4618      	mov	r0, r3
 8004952:	3738      	adds	r7, #56	; 0x38
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b090      	sub	sp, #64	; 0x40
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <xQueueGenericSendFromISR+0x3c>
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <xQueueGenericSendFromISR+0x40>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <xQueueGenericSendFromISR+0x42>
 800499c:	2300      	movs	r3, #0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d103      	bne.n	80049c6 <xQueueGenericSendFromISR+0x6a>
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <xQueueGenericSendFromISR+0x6e>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <xQueueGenericSendFromISR+0x70>
 80049ca:	2300      	movs	r3, #0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	623b      	str	r3, [r7, #32]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049e6:	f000 fe09 	bl	80055fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049ea:	f3ef 8211 	mrs	r2, BASEPRI
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	61fa      	str	r2, [r7, #28]
 8004a00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <xQueueGenericSendFromISR+0xbc>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d12f      	bne.n	8004a78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a2e:	f000 f830 	bl	8004a92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d112      	bne.n	8004a62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d016      	beq.n	8004a72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	3324      	adds	r3, #36	; 0x24
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fafd 	bl	8005048 <xTaskRemoveFromEventList>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00e      	beq.n	8004a72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00b      	beq.n	8004a72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e007      	b.n	8004a72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a66:	3301      	adds	r3, #1
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	b25a      	sxtb	r2, r3
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a72:	2301      	movs	r3, #1
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004a76:	e001      	b.n	8004a7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3740      	adds	r7, #64	; 0x40
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10d      	bne.n	8004acc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d14d      	bne.n	8004b54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fbe7 	bl	8005290 <xTaskPriorityDisinherit>
 8004ac2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	e043      	b.n	8004b54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d119      	bne.n	8004b06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6858      	ldr	r0, [r3, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	461a      	mov	r2, r3
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	f000 fe91 	bl	8005804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d32b      	bcc.n	8004b54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	e026      	b.n	8004b54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68d8      	ldr	r0, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	f000 fe77 	bl	8005804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	425b      	negs	r3, r3
 8004b20:	441a      	add	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d207      	bcs.n	8004b42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	425b      	negs	r3, r3
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d105      	bne.n	8004b54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b5c:	697b      	ldr	r3, [r7, #20]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b6e:	f000 fc93 	bl	8005498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b7a:	e011      	b.n	8004ba0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d012      	beq.n	8004baa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3324      	adds	r3, #36	; 0x24
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fa5d 	bl	8005048 <xTaskRemoveFromEventList>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b94:	f000 fb32 	bl	80051fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	dce9      	bgt.n	8004b7c <prvUnlockQueue+0x16>
 8004ba8:	e000      	b.n	8004bac <prvUnlockQueue+0x46>
					break;
 8004baa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	22ff      	movs	r2, #255	; 0xff
 8004bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bb4:	f000 fca0 	bl	80054f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bb8:	f000 fc6e 	bl	8005498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bc2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bc4:	e011      	b.n	8004bea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d012      	beq.n	8004bf4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3310      	adds	r3, #16
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa38 	bl	8005048 <xTaskRemoveFromEventList>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bde:	f000 fb0d 	bl	80051fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004be2:	7bbb      	ldrb	r3, [r7, #14]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	dce9      	bgt.n	8004bc6 <prvUnlockQueue+0x60>
 8004bf2:	e000      	b.n	8004bf6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bf4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	22ff      	movs	r2, #255	; 0xff
 8004bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bfe:	f000 fc7b 	bl	80054f8 <vPortExitCritical>
}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c12:	f000 fc41 	bl	8005498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d102      	bne.n	8004c28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c22:	2301      	movs	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e001      	b.n	8004c2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c2c:	f000 fc64 	bl	80054f8 <vPortExitCritical>

	return xReturn;
 8004c30:	68fb      	ldr	r3, [r7, #12]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <vTaskSuspendAll+0x18>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	4a03      	ldr	r2, [pc, #12]	; (8004c54 <vTaskSuspendAll+0x18>)
 8004c48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c4a:	bf00      	nop
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	2000025c 	.word	0x2000025c

08004c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c66:	4b41      	ldr	r3, [pc, #260]	; (8004d6c <xTaskResumeAll+0x114>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	603b      	str	r3, [r7, #0]
}
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c84:	f000 fc08 	bl	8005498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c88:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <xTaskResumeAll+0x114>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	4a37      	ldr	r2, [pc, #220]	; (8004d6c <xTaskResumeAll+0x114>)
 8004c90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c92:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <xTaskResumeAll+0x114>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d161      	bne.n	8004d5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c9a:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <xTaskResumeAll+0x118>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d05d      	beq.n	8004d5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ca2:	e02e      	b.n	8004d02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca4:	4b33      	ldr	r3, [pc, #204]	; (8004d74 <xTaskResumeAll+0x11c>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3318      	adds	r3, #24
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fd2a 	bl	800470a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fd25 	bl	800470a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <xTaskResumeAll+0x120>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	4a2a      	ldr	r2, [pc, #168]	; (8004d78 <xTaskResumeAll+0x120>)
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4a27      	ldr	r2, [pc, #156]	; (8004d7c <xTaskResumeAll+0x124>)
 8004ce0:	441a      	add	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7ff fcb1 	bl	8004650 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf2:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <xTaskResumeAll+0x128>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004cfc:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <xTaskResumeAll+0x12c>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d02:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <xTaskResumeAll+0x11c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1cc      	bne.n	8004ca4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d10:	f000 fa80 	bl	8005214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d14:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <xTaskResumeAll+0x130>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d010      	beq.n	8004d42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d20:	f000 f836 	bl	8004d90 <xTaskIncrementTick>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d2a:	4b16      	ldr	r3, [pc, #88]	; (8004d84 <xTaskResumeAll+0x12c>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f1      	bne.n	8004d20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004d3c:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <xTaskResumeAll+0x130>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <xTaskResumeAll+0x12c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <xTaskResumeAll+0x134>)
 8004d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d5e:	f000 fbcb 	bl	80054f8 <vPortExitCritical>

	return xAlreadyYielded;
 8004d62:	68bb      	ldr	r3, [r7, #8]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	2000025c 	.word	0x2000025c
 8004d70:	2000023c 	.word	0x2000023c
 8004d74:	20000214 	.word	0x20000214
 8004d78:	20000244 	.word	0x20000244
 8004d7c:	20000180 	.word	0x20000180
 8004d80:	2000017c 	.word	0x2000017c
 8004d84:	20000250 	.word	0x20000250
 8004d88:	2000024c 	.word	0x2000024c
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9a:	4b4e      	ldr	r3, [pc, #312]	; (8004ed4 <xTaskIncrementTick+0x144>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 808e 	bne.w	8004ec0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <xTaskIncrementTick+0x148>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004dac:	4a4a      	ldr	r2, [pc, #296]	; (8004ed8 <xTaskIncrementTick+0x148>)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d120      	bne.n	8004dfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004db8:	4b48      	ldr	r3, [pc, #288]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	603b      	str	r3, [r7, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <xTaskIncrementTick+0x46>
 8004dd8:	4b40      	ldr	r3, [pc, #256]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	4b40      	ldr	r3, [pc, #256]	; (8004ee0 <xTaskIncrementTick+0x150>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4a3e      	ldr	r2, [pc, #248]	; (8004ee0 <xTaskIncrementTick+0x150>)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <xTaskIncrementTick+0x154>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	4a3c      	ldr	r2, [pc, #240]	; (8004ee4 <xTaskIncrementTick+0x154>)
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	f000 fa0d 	bl	8005214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <xTaskIncrementTick+0x158>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d348      	bcc.n	8004e96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e04:	4b35      	ldr	r3, [pc, #212]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0e:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <xTaskIncrementTick+0x158>)
 8004e10:	f04f 32ff 	mov.w	r2, #4294967295
 8004e14:	601a      	str	r2, [r3, #0]
					break;
 8004e16:	e03e      	b.n	8004e96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e18:	4b30      	ldr	r3, [pc, #192]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d203      	bcs.n	8004e38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e30:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <xTaskIncrementTick+0x158>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e36:	e02e      	b.n	8004e96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fc64 	bl	800470a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d004      	beq.n	8004e54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3318      	adds	r3, #24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fc5b 	bl	800470a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	2201      	movs	r2, #1
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	4b23      	ldr	r3, [pc, #140]	; (8004eec <xTaskIncrementTick+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	4a22      	ldr	r2, [pc, #136]	; (8004eec <xTaskIncrementTick+0x15c>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4a1f      	ldr	r2, [pc, #124]	; (8004ef0 <xTaskIncrementTick+0x160>)
 8004e74:	441a      	add	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f7ff fbe7 	bl	8004650 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <xTaskIncrementTick+0x164>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d3b9      	bcc.n	8004e04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e94:	e7b6      	b.n	8004e04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e96:	4b17      	ldr	r3, [pc, #92]	; (8004ef4 <xTaskIncrementTick+0x164>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	4914      	ldr	r1, [pc, #80]	; (8004ef0 <xTaskIncrementTick+0x160>)
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d901      	bls.n	8004eb2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <xTaskIncrementTick+0x168>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e004      	b.n	8004eca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <xTaskIncrementTick+0x16c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <xTaskIncrementTick+0x16c>)
 8004ec8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004eca:	697b      	ldr	r3, [r7, #20]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	2000025c 	.word	0x2000025c
 8004ed8:	20000240 	.word	0x20000240
 8004edc:	2000020c 	.word	0x2000020c
 8004ee0:	20000210 	.word	0x20000210
 8004ee4:	20000254 	.word	0x20000254
 8004ee8:	20000258 	.word	0x20000258
 8004eec:	20000244 	.word	0x20000244
 8004ef0:	20000180 	.word	0x20000180
 8004ef4:	2000017c 	.word	0x2000017c
 8004ef8:	20000250 	.word	0x20000250
 8004efc:	2000024c 	.word	0x2000024c

08004f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f06:	4b39      	ldr	r3, [pc, #228]	; (8004fec <vTaskSwitchContext+0xec>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f0e:	4b38      	ldr	r3, [pc, #224]	; (8004ff0 <vTaskSwitchContext+0xf0>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f14:	e066      	b.n	8004fe4 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8004f16:	4b36      	ldr	r3, [pc, #216]	; (8004ff0 <vTaskSwitchContext+0xf0>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004f1c:	4b35      	ldr	r3, [pc, #212]	; (8004ff4 <vTaskSwitchContext+0xf4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d111      	bne.n	8004f58 <vTaskSwitchContext+0x58>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	3304      	adds	r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d10b      	bne.n	8004f58 <vTaskSwitchContext+0x58>
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	3308      	adds	r3, #8
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d105      	bne.n	8004f58 <vTaskSwitchContext+0x58>
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d008      	beq.n	8004f6a <vTaskSwitchContext+0x6a>
 8004f58:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <vTaskSwitchContext+0xf4>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <vTaskSwitchContext+0xf4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3334      	adds	r3, #52	; 0x34
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f7fb facd 	bl	8000504 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f6a:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <vTaskSwitchContext+0xf8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f78:	7afb      	ldrb	r3, [r7, #11]
 8004f7a:	f1c3 031f 	rsb	r3, r3, #31
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	491e      	ldr	r1, [pc, #120]	; (8004ffc <vTaskSwitchContext+0xfc>)
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <vTaskSwitchContext+0xaa>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	607b      	str	r3, [r7, #4]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <vTaskSwitchContext+0xa8>
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <vTaskSwitchContext+0xfc>)
 8004fb6:	4413      	add	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d104      	bne.n	8004fda <vTaskSwitchContext+0xda>
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4a04      	ldr	r2, [pc, #16]	; (8004ff4 <vTaskSwitchContext+0xf4>)
 8004fe2:	6013      	str	r3, [r2, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	2000025c 	.word	0x2000025c
 8004ff0:	20000250 	.word	0x20000250
 8004ff4:	2000017c 	.word	0x2000017c
 8004ff8:	20000244 	.word	0x20000244
 8004ffc:	20000180 	.word	0x20000180

08005000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005026:	4b07      	ldr	r3, [pc, #28]	; (8005044 <vTaskPlaceOnEventList+0x44>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3318      	adds	r3, #24
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fb32 	bl	8004698 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005034:	2101      	movs	r1, #1
 8005036:	6838      	ldr	r0, [r7, #0]
 8005038:	f000 f9b0 	bl	800539c <prvAddCurrentTaskToDelayedList>
}
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	2000017c 	.word	0x2000017c

08005048 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60fb      	str	r3, [r7, #12]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	3318      	adds	r3, #24
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fb46 	bl	800470a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800507e:	4b1d      	ldr	r3, [pc, #116]	; (80050f4 <xTaskRemoveFromEventList+0xac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d11c      	bne.n	80050c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3304      	adds	r3, #4
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fb3d 	bl	800470a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	2201      	movs	r2, #1
 8005096:	409a      	lsls	r2, r3
 8005098:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <xTaskRemoveFromEventList+0xb0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4313      	orrs	r3, r2
 800509e:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <xTaskRemoveFromEventList+0xb0>)
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4a13      	ldr	r2, [pc, #76]	; (80050fc <xTaskRemoveFromEventList+0xb4>)
 80050b0:	441a      	add	r2, r3
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f7ff fac9 	bl	8004650 <vListInsertEnd>
 80050be:	e005      	b.n	80050cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3318      	adds	r3, #24
 80050c4:	4619      	mov	r1, r3
 80050c6:	480e      	ldr	r0, [pc, #56]	; (8005100 <xTaskRemoveFromEventList+0xb8>)
 80050c8:	f7ff fac2 	bl	8004650 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <xTaskRemoveFromEventList+0xbc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d905      	bls.n	80050e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050da:	2301      	movs	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <xTaskRemoveFromEventList+0xc0>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	e001      	b.n	80050ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050ea:	697b      	ldr	r3, [r7, #20]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	2000025c 	.word	0x2000025c
 80050f8:	20000244 	.word	0x20000244
 80050fc:	20000180 	.word	0x20000180
 8005100:	20000214 	.word	0x20000214
 8005104:	2000017c 	.word	0x2000017c
 8005108:	20000250 	.word	0x20000250

0800510c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <vTaskInternalSetTimeOutState+0x24>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <vTaskInternalSetTimeOutState+0x28>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	605a      	str	r2, [r3, #4]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000254 	.word	0x20000254
 8005134:	20000240 	.word	0x20000240

08005138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	613b      	str	r3, [r7, #16]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	60fb      	str	r3, [r7, #12]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800517a:	f000 f98d 	bl	8005498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800517e:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <xTaskCheckForTimeOut+0xbc>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d102      	bne.n	800519e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	e023      	b.n	80051e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <xTaskCheckForTimeOut+0xc0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d007      	beq.n	80051ba <xTaskCheckForTimeOut+0x82>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d302      	bcc.n	80051ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	e015      	b.n	80051e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d20b      	bcs.n	80051dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff ff9b 	bl	800510c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	e004      	b.n	80051e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051e6:	f000 f987 	bl	80054f8 <vPortExitCritical>

	return xReturn;
 80051ea:	69fb      	ldr	r3, [r7, #28]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3720      	adds	r7, #32
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20000240 	.word	0x20000240
 80051f8:	20000254 	.word	0x20000254

080051fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005200:	4b03      	ldr	r3, [pc, #12]	; (8005210 <vTaskMissedYield+0x14>)
 8005202:	2201      	movs	r2, #1
 8005204:	601a      	str	r2, [r3, #0]
}
 8005206:	bf00      	nop
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000250 	.word	0x20000250

08005214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800521a:	4b0c      	ldr	r3, [pc, #48]	; (800524c <prvResetNextTaskUnblockTime+0x38>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d104      	bne.n	800522e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <prvResetNextTaskUnblockTime+0x3c>)
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800522c:	e008      	b.n	8005240 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522e:	4b07      	ldr	r3, [pc, #28]	; (800524c <prvResetNextTaskUnblockTime+0x38>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4a04      	ldr	r2, [pc, #16]	; (8005250 <prvResetNextTaskUnblockTime+0x3c>)
 800523e:	6013      	str	r3, [r2, #0]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	2000020c 	.word	0x2000020c
 8005250:	20000258 	.word	0x20000258

08005254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <xTaskGetSchedulerState+0x34>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005262:	2301      	movs	r3, #1
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	e008      	b.n	800527a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <xTaskGetSchedulerState+0x38>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005270:	2302      	movs	r3, #2
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	e001      	b.n	800527a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005276:	2300      	movs	r3, #0
 8005278:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800527a:	687b      	ldr	r3, [r7, #4]
	}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	20000248 	.word	0x20000248
 800528c:	2000025c 	.word	0x2000025c

08005290 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d06e      	beq.n	8005384 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052a6:	4b3a      	ldr	r3, [pc, #232]	; (8005390 <xTaskPriorityDisinherit+0x100>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d00a      	beq.n	80052c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	60fb      	str	r3, [r7, #12]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	60bb      	str	r3, [r7, #8]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e8:	1e5a      	subs	r2, r3, #1
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d044      	beq.n	8005384 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d140      	bne.n	8005384 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	3304      	adds	r3, #4
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff f9ff 	bl	800470a <uxListRemove>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d115      	bne.n	800533e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005316:	491f      	ldr	r1, [pc, #124]	; (8005394 <xTaskPriorityDisinherit+0x104>)
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <xTaskPriorityDisinherit+0xae>
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	2201      	movs	r2, #1
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43da      	mvns	r2, r3
 8005334:	4b18      	ldr	r3, [pc, #96]	; (8005398 <xTaskPriorityDisinherit+0x108>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4013      	ands	r3, r2
 800533a:	4a17      	ldr	r2, [pc, #92]	; (8005398 <xTaskPriorityDisinherit+0x108>)
 800533c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	f1c3 0207 	rsb	r2, r3, #7
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	2201      	movs	r2, #1
 8005358:	409a      	lsls	r2, r3
 800535a:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <xTaskPriorityDisinherit+0x108>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4313      	orrs	r3, r2
 8005360:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <xTaskPriorityDisinherit+0x108>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <xTaskPriorityDisinherit+0x104>)
 8005372:	441a      	add	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f7ff f968 	bl	8004650 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005384:	697b      	ldr	r3, [r7, #20]
	}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	2000017c 	.word	0x2000017c
 8005394:	20000180 	.word	0x20000180
 8005398:	20000244 	.word	0x20000244

0800539c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053a6:	4b29      	ldr	r3, [pc, #164]	; (800544c <prvAddCurrentTaskToDelayedList+0xb0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ac:	4b28      	ldr	r3, [pc, #160]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff f9a9 	bl	800470a <uxListRemove>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80053be:	4b24      	ldr	r3, [pc, #144]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	2201      	movs	r2, #1
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43da      	mvns	r2, r3
 80053cc:	4b21      	ldr	r3, [pc, #132]	; (8005454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4013      	ands	r3, r2
 80053d2:	4a20      	ldr	r2, [pc, #128]	; (8005454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80053d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d10a      	bne.n	80053f4 <prvAddCurrentTaskToDelayedList+0x58>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053e4:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	481a      	ldr	r0, [pc, #104]	; (8005458 <prvAddCurrentTaskToDelayedList+0xbc>)
 80053ee:	f7ff f92f 	bl	8004650 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053f2:	e026      	b.n	8005442 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053fc:	4b14      	ldr	r3, [pc, #80]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	429a      	cmp	r2, r3
 800540a:	d209      	bcs.n	8005420 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800540c:	4b13      	ldr	r3, [pc, #76]	; (800545c <prvAddCurrentTaskToDelayedList+0xc0>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3304      	adds	r3, #4
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f7ff f93d 	bl	8004698 <vListInsert>
}
 800541e:	e010      	b.n	8005442 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005420:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f7ff f933 	bl	8004698 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d202      	bcs.n	8005442 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800543c:	4a09      	ldr	r2, [pc, #36]	; (8005464 <prvAddCurrentTaskToDelayedList+0xc8>)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6013      	str	r3, [r2, #0]
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000240 	.word	0x20000240
 8005450:	2000017c 	.word	0x2000017c
 8005454:	20000244 	.word	0x20000244
 8005458:	20000228 	.word	0x20000228
 800545c:	20000210 	.word	0x20000210
 8005460:	2000020c 	.word	0x2000020c
 8005464:	20000258 	.word	0x20000258
	...

08005470 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <pxCurrentTCBConst2>)
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	6808      	ldr	r0, [r1, #0]
 8005476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	f380 8809 	msr	PSP, r0
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8811 	msr	BASEPRI, r0
 800548a:	4770      	bx	lr
 800548c:	f3af 8000 	nop.w

08005490 <pxCurrentTCBConst2>:
 8005490:	2000017c 	.word	0x2000017c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054b2:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <vPortEnterCritical+0x58>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3301      	adds	r3, #1
 80054b8:	4a0d      	ldr	r2, [pc, #52]	; (80054f0 <vPortEnterCritical+0x58>)
 80054ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054bc:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <vPortEnterCritical+0x58>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d10f      	bne.n	80054e4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <vPortEnterCritical+0x5c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <vPortEnterCritical+0x4c>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	603b      	str	r3, [r7, #0]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <vPortEnterCritical+0x4a>
	}
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	2000000c 	.word	0x2000000c
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <vPortExitCritical+0x50>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <vPortExitCritical+0x24>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	607b      	str	r3, [r7, #4]
}
 8005518:	bf00      	nop
 800551a:	e7fe      	b.n	800551a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <vPortExitCritical+0x50>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3b01      	subs	r3, #1
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <vPortExitCritical+0x50>)
 8005524:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <vPortExitCritical+0x50>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d105      	bne.n	800553a <vPortExitCritical+0x42>
 800552e:	2300      	movs	r3, #0
 8005530:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f383 8811 	msr	BASEPRI, r3
}
 8005538:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	2000000c 	.word	0x2000000c
 800554c:	00000000 	.word	0x00000000

08005550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005550:	f3ef 8009 	mrs	r0, PSP
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <pxCurrentTCBConst>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	f01e 0f10 	tst.w	lr, #16
 8005560:	bf08      	it	eq
 8005562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556a:	6010      	str	r0, [r2, #0]
 800556c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005574:	f380 8811 	msr	BASEPRI, r0
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f7ff fcbe 	bl	8004f00 <vTaskSwitchContext>
 8005584:	f04f 0000 	mov.w	r0, #0
 8005588:	f380 8811 	msr	BASEPRI, r0
 800558c:	bc09      	pop	{r0, r3}
 800558e:	6819      	ldr	r1, [r3, #0]
 8005590:	6808      	ldr	r0, [r1, #0]
 8005592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005596:	f01e 0f10 	tst.w	lr, #16
 800559a:	bf08      	it	eq
 800559c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055a0:	f380 8809 	msr	PSP, r0
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	f3af 8000 	nop.w

080055b0 <pxCurrentTCBConst>:
 80055b0:	2000017c 	.word	0x2000017c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	607b      	str	r3, [r7, #4]
}
 80055d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055d2:	f7ff fbdd 	bl	8004d90 <xTaskIncrementTick>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <SysTick_Handler+0x40>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f383 8811 	msr	BASEPRI, r3
}
 80055ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005602:	f3ef 8305 	mrs	r3, IPSR
 8005606:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b0f      	cmp	r3, #15
 800560c:	d914      	bls.n	8005638 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800560e:	4a17      	ldr	r2, [pc, #92]	; (800566c <vPortValidateInterruptPriority+0x70>)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005618:	4b15      	ldr	r3, [pc, #84]	; (8005670 <vPortValidateInterruptPriority+0x74>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	7afa      	ldrb	r2, [r7, #11]
 800561e:	429a      	cmp	r2, r3
 8005620:	d20a      	bcs.n	8005638 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	607b      	str	r3, [r7, #4]
}
 8005634:	bf00      	nop
 8005636:	e7fe      	b.n	8005636 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005638:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <vPortValidateInterruptPriority+0x78>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <vPortValidateInterruptPriority+0x7c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d90a      	bls.n	800565e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	603b      	str	r3, [r7, #0]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <vPortValidateInterruptPriority+0x60>
	}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	e000e3f0 	.word	0xe000e3f0
 8005670:	20000260 	.word	0x20000260
 8005674:	e000ed0c 	.word	0xe000ed0c
 8005678:	20000264 	.word	0x20000264

0800567c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800568a:	4618      	mov	r0, r3
 800568c:	f7fe feb2 	bl	80043f4 <USBH_LL_IncTimer>
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fef6 	bl	8004498 <USBH_LL_Connect>
}
 80056ac:	bf00      	nop
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe ff0b 	bl	80044de <USBH_LL_Disconnect>
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
 80056dc:	4613      	mov	r3, r2
 80056de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe ff2b 	bl	8004542 <USBH_LL_NotifyURBChange>
#endif
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fea0 	bl	8004448 <USBH_LL_PortEnabled>
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe feac 	bl	800447c <USBH_LL_PortDisabled>
}
 8005724:	bf00      	nop
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005742:	4618      	mov	r0, r3
 8005744:	f7fc f8a8 	bl	8001898 <HAL_HCD_Stop>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f808 	bl	8005764 <USBH_Get_USB_Status>
 8005754:	4603      	mov	r3, r0
 8005756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005758:	7bbb      	ldrb	r3, [r7, #14]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	2b03      	cmp	r3, #3
 8005776:	d817      	bhi.n	80057a8 <USBH_Get_USB_Status+0x44>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <USBH_Get_USB_Status+0x1c>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	08005791 	.word	0x08005791
 8005784:	08005797 	.word	0x08005797
 8005788:	0800579d 	.word	0x0800579d
 800578c:	080057a3 	.word	0x080057a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	73fb      	strb	r3, [r7, #15]
    break;
 8005794:	e00b      	b.n	80057ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005796:	2302      	movs	r3, #2
 8005798:	73fb      	strb	r3, [r7, #15]
    break;
 800579a:	e008      	b.n	80057ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
    break;
 80057a0:	e005      	b.n	80057ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80057a2:	2302      	movs	r3, #2
 80057a4:	73fb      	strb	r3, [r7, #15]
    break;
 80057a6:	e002      	b.n	80057ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80057a8:	2302      	movs	r3, #2
 80057aa:	73fb      	strb	r3, [r7, #15]
    break;
 80057ac:	bf00      	nop
  }
  return usb_status;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <__libc_init_array>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4d0d      	ldr	r5, [pc, #52]	; (80057f4 <__libc_init_array+0x38>)
 80057c0:	4c0d      	ldr	r4, [pc, #52]	; (80057f8 <__libc_init_array+0x3c>)
 80057c2:	1b64      	subs	r4, r4, r5
 80057c4:	10a4      	asrs	r4, r4, #2
 80057c6:	2600      	movs	r6, #0
 80057c8:	42a6      	cmp	r6, r4
 80057ca:	d109      	bne.n	80057e0 <__libc_init_array+0x24>
 80057cc:	4d0b      	ldr	r5, [pc, #44]	; (80057fc <__libc_init_array+0x40>)
 80057ce:	4c0c      	ldr	r4, [pc, #48]	; (8005800 <__libc_init_array+0x44>)
 80057d0:	f000 f82e 	bl	8005830 <_init>
 80057d4:	1b64      	subs	r4, r4, r5
 80057d6:	10a4      	asrs	r4, r4, #2
 80057d8:	2600      	movs	r6, #0
 80057da:	42a6      	cmp	r6, r4
 80057dc:	d105      	bne.n	80057ea <__libc_init_array+0x2e>
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e4:	4798      	blx	r3
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7ee      	b.n	80057c8 <__libc_init_array+0xc>
 80057ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ee:	4798      	blx	r3
 80057f0:	3601      	adds	r6, #1
 80057f2:	e7f2      	b.n	80057da <__libc_init_array+0x1e>
 80057f4:	08005868 	.word	0x08005868
 80057f8:	08005868 	.word	0x08005868
 80057fc:	08005868 	.word	0x08005868
 8005800:	0800586c 	.word	0x0800586c

08005804 <memcpy>:
 8005804:	440a      	add	r2, r1
 8005806:	4291      	cmp	r1, r2
 8005808:	f100 33ff 	add.w	r3, r0, #4294967295
 800580c:	d100      	bne.n	8005810 <memcpy+0xc>
 800580e:	4770      	bx	lr
 8005810:	b510      	push	{r4, lr}
 8005812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800581a:	4291      	cmp	r1, r2
 800581c:	d1f9      	bne.n	8005812 <memcpy+0xe>
 800581e:	bd10      	pop	{r4, pc}

08005820 <memset>:
 8005820:	4402      	add	r2, r0
 8005822:	4603      	mov	r3, r0
 8005824:	4293      	cmp	r3, r2
 8005826:	d100      	bne.n	800582a <memset+0xa>
 8005828:	4770      	bx	lr
 800582a:	f803 1b01 	strb.w	r1, [r3], #1
 800582e:	e7f9      	b.n	8005824 <memset+0x4>

08005830 <_init>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr

0800583c <_fini>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr
